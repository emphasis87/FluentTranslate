//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FluentTranslate.Tests {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("FluentTranslate.Tests.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to login-input = Predefined value
        ///    .placeholder = email@example.com
        ///    .aria-label = Login input value
        ///    .title = Type your login email.
        /// </summary>
        internal static string Attributes {
            get {
                return ResourceManager.GetString("Attributes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to # This Source Code Form is subject to the terms of the Mozilla Public
        ///# License, v. 2.0. If a copy of the MPL was not distributed with this
        ///# file, You can obtain one at http://mozilla.org/MPL/2.0/.
        ///
        ///### Localization for Server-side strings of Firefox Screenshots
        ///
        ///## Global phrases shared across pages
        ///
        ///my-shots = My Shots
        ///home-link = Home
        ///screenshots-description =
        ///    Screenshots made simple. Take, save, and
        ///    share screenshots without leaving Firefox.
        ///
        ///## Creating page
        ///
        ///# Note: { $title } [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Comments {
            get {
                return ResourceManager.GetString("Comments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to emails = You have { $unreadEmails } unread emails.
        ///emails2 = You have { NUMBER($unreadEmails) } unread emails.
        ///
        ///last-notice =
        ///    Last checked: { DATETIME($lastChecked, day: &quot;numeric&quot;, month: &quot;long&quot;) }..
        /// </summary>
        internal static string Functions {
            get {
                return ResourceManager.GetString("Functions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to today-is = Today is { DATETIME($date, month: &quot;long&quot;, year: &quot;numeric&quot;, day: &quot;numeric&quot;) }.
        /// </summary>
        internal static string FunctionsDatetime {
            get {
                return ResourceManager.GetString("FunctionsDatetime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to dpi-ratio = Your DPI ratio is { NUMBER($ratio, minimumFractionDigits: 2) }.
        /// </summary>
        internal static string FunctionsNumber {
            get {
                return ResourceManager.GetString("FunctionsNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to hello = Hello, world!.
        /// </summary>
        internal static string Hello {
            get {
                return ResourceManager.GetString("Hello", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to multi = Text can also span multiple lines as long as
        ///    each new line is indented by at least one space.
        ///    Because all lines in this message are indented
        ///    by the same amount, all indentation will be
        ///    removed from the final value.
        ///
        ///indents =
        ///    Indentation common to all indented lines is removed
        ///    from the final text value.
        ///      This line has 2 spaces in front of it.
        ///
        ///leading-spaces =     This message&apos;s value starts with the word &quot;This&quot;.
        ///leading-lines =
        ///
        ///
        ///    This message&apos;s value  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string MultilineText {
            get {
                return ResourceManager.GetString("MultilineText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to # $title (String) - The title of the bookmark to remove.
        ///remove-bookmark = Are you sure you want to remove { $title }?.
        /// </summary>
        internal static string Placeables {
            get {
                return ResourceManager.GetString("Placeables", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to # $title (String) - The title of the bookmark to remove.
        ///remove-bookmark = Are you sure you want to remove { { { $title } } } { &quot;this bookmark&quot; }?.
        /// </summary>
        internal static string PlaceablesInner {
            get {
                return ResourceManager.GetString("PlaceablesInner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -brand-name = Firefox
        ///installing = Installing { -brand-name }.
        ///
        ///menu-save = Save
        ///help-menu-save = Click { menu-save } to save the file..
        /// </summary>
        internal static string PlaceablesInterpolation {
            get {
                return ResourceManager.GetString("PlaceablesInterpolation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to opening-brace = This message features an opening curly brace: {&quot;{&quot;}.
        ///closing-brace = This message features a closing curly brace: {&quot;}&quot;}..
        /// </summary>
        internal static string PlaceablesSpecialCharacters {
            get {
                return ResourceManager.GetString("PlaceablesSpecialCharacters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to blank-is-removed =     This message starts with no blanks.
        ///blank-is-preserved = {&quot;    &quot;}This message starts with 4 spaces..
        /// </summary>
        internal static string QuotedText {
            get {
                return ResourceManager.GetString("QuotedText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to # This is OK, but cryptic and hard to read and edit.
        ///literal-quote1 = Text in {&quot;\&quot;&quot;}double quotes{&quot;\&quot;&quot;}.
        ///
        ///# This is preferred. Just use the actual double quote character.
        ///literal-quote2 = Text in &quot;double quotes&quot;..
        /// </summary>
        internal static string QuotedTextEscape {
            get {
                return ResourceManager.GetString("QuotedTextEscape", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to leading-bracket =
        ///    This message has an opening square bracket
        ///    at the beginning of the third line:
        ///    {&quot;[&quot;}..
        /// </summary>
        internal static string QuotedTextLeadingBracket {
            get {
                return ResourceManager.GetString("QuotedTextLeadingBracket", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to attribute-how-to =
        ///    To add an attribute to this messages, write
        ///    {&quot;.attr = Value&quot;} on a new line.
        ///    .attr = An actual attribute (not part of the text value above).
        /// </summary>
        internal static string QuotedTextLeadingDot {
            get {
                return ResourceManager.GetString("QuotedTextLeadingDot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to # The dash character is an EM DASH but depending on the font face,
        ///# it might look like an EN DASH.
        ///which-dash1 = It&apos;s a dash—or is it?
        ///
        ///# Using a Unicode escape sequence makes the intent clear.
        ///which-dash2 = It&apos;s a dash{&quot;\u2014&quot;}or is it?.
        /// </summary>
        internal static string QuotedTextUnicodeDash {
            get {
                return ResourceManager.GetString("QuotedTextUnicodeDash", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to privacy-label = Privacy{&quot;\u00A0&quot;}Policy.
        /// </summary>
        internal static string QuotedTextUnicodeEscape {
            get {
                return ResourceManager.GetString("QuotedTextUnicodeEscape", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to emails =
        ///    { $unreadEmails -&gt;
        ///        [one] You have one unread email.
        ///       *[other] You have { $unreadEmails } unread emails.
        ///    }.
        /// </summary>
        internal static string Selectors {
            get {
                return ResourceManager.GetString("Selectors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to your-score =
        ///    { NUMBER($score, minimumFractionDigits: 1) -&gt;
        ///        [0.0]   You scored zero points. What happened?
        ///       *[other] You scored { NUMBER($score, minimumFractionDigits: 1) } points.
        ///    }.
        /// </summary>
        internal static string SelectorsNumber {
            get {
                return ResourceManager.GetString("SelectorsNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to your-rank = { NUMBER($pos, type: &quot;ordinal&quot;) -&gt;
        ///   [1] You finished first!
        ///   [one] You finished {$pos}st
        ///   [two] You finished {$pos}nd
        ///   [few] You finished {$pos}rd
        ///  *[other] You finished {$pos}th
        ///}.
        /// </summary>
        internal static string SelectorsOrdinal {
            get {
                return ResourceManager.GetString("SelectorsOrdinal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -brand-name = Aurora
        ///    .gender = feminine
        ///
        ///update-successful =
        ///    { -brand-name.gender -&gt;
        ///        [masculine] { -brand-name} został zaktualizowany.
        ///        [feminine] { -brand-name } została zaktualizowana.
        ///       *[other] Program { -brand-name } został zaktualizowany.
        ///    }.
        /// </summary>
        internal static string TermsAttributes {
            get {
                return ResourceManager.GetString("TermsAttributes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to # A contrived example to demonstrate how variables
        ///# can be passed to terms.
        ///-https = https://{ $host }
        ///visit = Visit { -https(host: &quot;example.com&quot;) } for more information..
        /// </summary>
        internal static string TermsParameterized {
            get {
                return ResourceManager.GetString("TermsParameterized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -brand-name =
        ///    { $case -&gt;
        ///       *[nominative] Firefox
        ///        [locative] Firefoxa
        ///    }
        ///
        ///# &quot;About Firefox.&quot;
        ///about = Informacje o { -brand-name(case: &quot;locative&quot;) }..
        /// </summary>
        internal static string TermsVariants {
            get {
                return ResourceManager.GetString("TermsVariants", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to welcome = Welcome, { $user }!
        ///unread-emails = { $user } has { $email-count } unread emails..
        /// </summary>
        internal static string Variables {
            get {
                return ResourceManager.GetString("Variables", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to # $duration (Number) - The duration in seconds.
        ///time-elapsed = Time elapsed: { NUMBER($duration, maximumFractionDigits: 0) }s..
        /// </summary>
        internal static string VariablesExplicitFormatting {
            get {
                return ResourceManager.GetString("VariablesExplicitFormatting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to # $duration (Number) - The duration in seconds.
        ///time-elapsed = Time elapsed: { $duration }s..
        /// </summary>
        internal static string VariablesImplicitFormatting {
            get {
                return ResourceManager.GetString("VariablesImplicitFormatting", resourceCulture);
            }
        }
    }
}
