//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:\projects\FluentTranslate\src\FluentTranslate.Parser\FluentLexer.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class FluentLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT_OPEN=1, IDENTIFIER=2, EQUALS=3, SPACES=4, NL=5, COMMENT_NL=6, 
		COMMENT_CONTENT=7, TEXT_INLINE=8, CONTENT_NL=9, INDENT=10;
	public const int
		IN_COMMENT=1, IN_CONTENT=2, MAYBE_CONTENT=3;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "IN_COMMENT", "IN_CONTENT", "MAYBE_CONTENT"
	};

	public static readonly string[] ruleNames = {
		"InlineChar", "Newline", "COMMENT_OPEN", "IDENTIFIER", "EQUALS", "SPACES", 
		"NL", "COMMENT_NL", "COMMENT_CONTENT", "TEXT_INLINE", "CONTENT_NL", "INDENT", 
		"OTHER"
	};


	public FluentLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public FluentLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'#'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT_OPEN", "IDENTIFIER", "EQUALS", "SPACES", "NL", "COMMENT_NL", 
		"COMMENT_CONTENT", "TEXT_INLINE", "CONTENT_NL", "INDENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FluentLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static FluentLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\f', '\x61', '\b', '\x1', '\b', '\x1', '\b', '\x1', 
		'\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', '\x3', '\x4', 
		'\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', '\t', '\x6', 
		'\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', '\x4', '\t', '\t', '\t', 
		'\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', '\x4', '\f', '\t', '\f', 
		'\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', '\xE', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '&', '\n', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\a', '\x5', '.', '\n', '\x5', '\f', '\x5', '\xE', 
		'\x5', '\x31', '\v', '\x5', '\x3', '\x6', '\x5', '\x6', '\x34', '\n', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x38', '\n', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x6', '\a', '=', '\n', '\a', 
		'\r', '\a', '\xE', '\a', '>', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\a', '\n', 'H', '\n', '\n', 
		'\f', '\n', '\xE', '\n', 'K', '\v', '\n', '\x3', '\v', '\x6', '\v', 'N', 
		'\n', '\v', '\r', '\v', '\xE', '\v', 'O', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\r', '\x6', '\r', 'W', '\n', '\r', '\r', '\r', 
		'\xE', '\r', 'X', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 'I', '\x2', '\xF', '\x6', 
		'\x2', '\b', '\x2', '\n', '\x3', '\f', '\x4', '\xE', '\x5', '\x10', '\x6', 
		'\x12', '\a', '\x14', '\b', '\x16', '\t', '\x18', '\n', '\x1A', '\v', 
		'\x1C', '\f', '\x1E', '\x2', '\x6', '\x2', '\x3', '\x4', '\x5', '\a', 
		'\x6', '\x2', '\f', '\f', '\xF', '\xF', '}', '}', '\x7F', '\x7F', '\x4', 
		'\x2', '\x43', '\\', '\x63', '|', '\a', '\x2', '/', '/', '\x32', ';', 
		'\x43', '\\', '\x61', '\x61', '\x63', '|', '\x4', '\x2', '\f', '\f', '\xF', 
		'\xF', '\x3', '\x2', '\"', '\"', '\x2', '\x63', '\x2', '\n', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\f', '\x3', '\x2', '\x2', '\x2', '\x2', '\xE', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x10', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x12', '\x3', '\x2', '\x2', '\x2', '\x3', '\x14', '\x3', '\x2', '\x2', 
		'\x2', '\x3', '\x16', '\x3', '\x2', '\x2', '\x2', '\x4', '\x18', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x5', 
		'\x1C', '\x3', '\x2', '\x2', '\x2', '\x5', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', '\x6', ' ', '\x3', '\x2', '\x2', '\x2', '\b', '%', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\'', '\x3', '\x2', '\x2', '\x2', '\f', '+', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x33', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'<', '\x3', '\x2', '\x2', '\x2', '\x12', '@', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\x42', '\x3', '\x2', '\x2', '\x2', '\x16', 'I', '\x3', '\x2', 
		'\x2', '\x2', '\x18', 'M', '\x3', '\x2', '\x2', '\x2', '\x1A', 'Q', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', 'V', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\\', '\x3', '\x2', '\x2', '\x2', ' ', '!', '\n', '\x2', '\x2', '\x2', 
		'!', '\a', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\a', '\xF', '\x2', 
		'\x2', '#', '&', '\a', '\f', '\x2', '\x2', '$', '&', '\a', '\f', '\x2', 
		'\x2', '%', '\"', '\x3', '\x2', '\x2', '\x2', '%', '$', '\x3', '\x2', 
		'\x2', '\x2', '&', '\t', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\a', 
		'%', '\x2', '\x2', '(', ')', '\x3', '\x2', '\x2', '\x2', ')', '*', '\b', 
		'\x4', '\x2', '\x2', '*', '\v', '\x3', '\x2', '\x2', '\x2', '+', '/', 
		'\t', '\x3', '\x2', '\x2', ',', '.', '\t', '\x4', '\x2', '\x2', '-', ',', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x31', '\x3', '\x2', '\x2', '\x2', '/', 
		'-', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\r', '\x3', '\x2', '\x2', '\x2', '\x31', '/', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\x34', '\x5', '\x10', '\a', '\x2', '\x33', '\x32', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '\x34', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x35', '\x37', '\a', '?', '\x2', 
		'\x2', '\x36', '\x38', '\x5', '\x10', '\a', '\x2', '\x37', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\x38', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\b', '\x6', '\x3', '\x2', 
		':', '\xF', '\x3', '\x2', '\x2', '\x2', ';', '=', '\a', '\"', '\x2', '\x2', 
		'<', ';', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', 
		'>', '<', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x3', '\x2', '\x2', '\x2', 
		'?', '\x11', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\x5', '\b', '\x3', 
		'\x2', '\x41', '\x13', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\x5', 
		'\b', '\x3', '\x2', '\x43', '\x44', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x45', '\b', '\t', '\x4', '\x2', '\x45', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x46', 'H', '\n', '\x5', '\x2', '\x2', 'G', '\x46', '\x3', '\x2', 
		'\x2', '\x2', 'H', 'K', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\x3', '\x2', 
		'\x2', '\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 'J', '\x17', '\x3', 
		'\x2', '\x2', '\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 'L', 'N', '\x5', 
		'\x6', '\x2', '\x2', 'M', 'L', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x3', 
		'\x2', '\x2', '\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\x3', 
		'\x2', '\x2', '\x2', 'P', '\x19', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', 
		'\x5', '\b', '\x3', '\x2', 'R', 'S', '\x3', '\x2', '\x2', '\x2', 'S', 
		'T', '\b', '\f', '\x5', '\x2', 'T', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'U', 'W', '\a', '\"', '\x2', '\x2', 'V', 'U', '\x3', '\x2', '\x2', '\x2', 
		'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', 'V', '\x3', '\x2', '\x2', '\x2', 
		'X', 'Y', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'Z', '[', '\b', '\r', '\x3', '\x2', '[', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\\', ']', '\n', '\x6', '\x2', '\x2', ']', '^', '\x3', '\x2', '\x2', 
		'\x2', '^', '_', '\b', '\xE', '\x6', '\x2', '_', '`', '\b', '\xE', '\x4', 
		'\x2', '`', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xF', '\x2', '\x3', '\x4', 
		'\x5', '%', '-', '/', '\x33', '\x37', '>', 'I', 'O', 'X', '\a', '\x4', 
		'\x3', '\x2', '\x4', '\x4', '\x2', '\x6', '\x2', '\x2', '\x4', '\x5', 
		'\x2', '\x5', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
