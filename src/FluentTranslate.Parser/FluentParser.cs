//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\projects\FluentTranslate\src\FluentTranslate.Parser\Fluent.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class FluentParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, INLINE_CHAR=16, 
		INDENTED_CHAR=17, SPECIAL_TEXT_CHAR=18, QUOTED_CHAR=19, SPECIAL_CHAR=20, 
		STRING_LITERAL=21, NUMBER_LITERAL=22, IDENTIFIER=23, EQUALS=24, WS=25, 
		SPACES=26, CMT3=27, CMT2=28, CMT1=29, LINE_END=30, NEWLINE=31, COMMENT=32;
	public const int
		RULE_resource = 0, RULE_entry = 1, RULE_message = 2, RULE_term = 3, RULE_expressionList = 4, 
		RULE_expression = 5, RULE_attribute = 6, RULE_textInline = 7, RULE_textBlock = 8, 
		RULE_placeableInline = 9, RULE_placeableBlock = 10, RULE_selectExpression = 11, 
		RULE_inlineExpression = 12, RULE_functionReference = 13, RULE_messageReference = 14, 
		RULE_termReference = 15, RULE_variableReference = 16, RULE_attributeAccessor = 17, 
		RULE_callArguments = 18, RULE_argumentList = 19, RULE_argument = 20, RULE_namedArgument = 21, 
		RULE_variantList = 22, RULE_defaultVariant = 23, RULE_variant = 24, RULE_variantKey = 25, 
		RULE_stringLiteral = 26, RULE_numberLiteral = 27, RULE_comment = 28, RULE_comment3 = 29, 
		RULE_comment2 = 30, RULE_comment1 = 31, RULE_commentLine3 = 32, RULE_commentLine2 = 33, 
		RULE_commentLine1 = 34, RULE_emptyLine = 35;
	public static readonly string[] ruleNames = {
		"resource", "entry", "message", "term", "expressionList", "expression", 
		"attribute", "textInline", "textBlock", "placeableInline", "placeableBlock", 
		"selectExpression", "inlineExpression", "functionReference", "messageReference", 
		"termReference", "variableReference", "attributeAccessor", "callArguments", 
		"argumentList", "argument", "namedArgument", "variantList", "defaultVariant", 
		"variant", "variantKey", "stringLiteral", "numberLiteral", "comment", 
		"comment3", "comment2", "comment1", "commentLine3", "commentLine2", "commentLine1", 
		"emptyLine"
	};

	private static readonly string[] _LiteralNames = {
		null, "'-'", "'.'", "'{'", "'}'", "'->'", "'$'", "'('", "')'", "','", 
		"':'", "'*'", "'['", "']'", "' '", "'\t'", null, null, null, null, null, 
		null, null, null, null, null, null, "'###'", "'##'", "'#'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "INLINE_CHAR", "INDENTED_CHAR", "SPECIAL_TEXT_CHAR", 
		"QUOTED_CHAR", "SPECIAL_CHAR", "STRING_LITERAL", "NUMBER_LITERAL", "IDENTIFIER", 
		"EQUALS", "WS", "SPACES", "CMT3", "CMT2", "CMT1", "LINE_END", "NEWLINE", 
		"COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Fluent.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static FluentParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FluentParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FluentParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ResourceContext : FluentTranslate.Parser.FluentContext {
		public EntryContext[] entry() {
			return GetRuleContexts<EntryContext>();
		}
		public EntryContext entry(int i) {
			return GetRuleContext<EntryContext>(i);
		}
		public ResourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentVisitor<TResult> typedVisitor = visitor as IFluentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceContext resource() {
		ResourceContext _localctx = new ResourceContext(Context, State);
		EnterRule(_localctx, 0, RULE_resource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__13) | (1L << T__14) | (1L << IDENTIFIER) | (1L << CMT3) | (1L << CMT2) | (1L << CMT1) | (1L << LINE_END))) != 0)) {
				{
				{
				State = 72; entry();
				}
				}
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntryContext : FluentTranslate.Parser.FluentContext {
		public MessageContext message() {
			return GetRuleContext<MessageContext>(0);
		}
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public EmptyLineContext emptyLine() {
			return GetRuleContext<EmptyLineContext>(0);
		}
		public EntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entry; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentVisitor<TResult> typedVisitor = visitor as IFluentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntryContext entry() {
		EntryContext _localctx = new EntryContext(Context, State);
		EnterRule(_localctx, 2, RULE_entry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 78; message();
				}
				break;
			case 2:
				{
				State = 79; term();
				}
				break;
			case 3:
				{
				State = 80; comment();
				}
				break;
			case 4:
				{
				State = 81; emptyLine();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageContext : FluentTranslate.Parser.FluentContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FluentParser.IDENTIFIER, 0); }
		public ITerminalNode EQUALS() { return GetToken(FluentParser.EQUALS, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public Comment1Context comment1() {
			return GetRuleContext<Comment1Context>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public MessageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_message; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentVisitor<TResult> typedVisitor = visitor as IFluentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageContext message() {
		MessageContext _localctx = new MessageContext(Context, State);
		EnterRule(_localctx, 4, RULE_message);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CMT1) {
				{
				State = 84; comment1();
				}
			}

			State = 87; Match(IDENTIFIER);
			State = 88; Match(EQUALS);
			State = 101;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case INLINE_CHAR:
			case WS:
				{
				State = 89; expressionList();
				State = 93;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 90; attribute();
						}
						} 
					}
					State = 95;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				}
				}
				break;
			case LINE_END:
				{
				State = 97;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 96; attribute();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 99;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : FluentTranslate.Parser.FluentContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FluentParser.IDENTIFIER, 0); }
		public ITerminalNode EQUALS() { return GetToken(FluentParser.EQUALS, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public Comment1Context comment1() {
			return GetRuleContext<Comment1Context>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentVisitor<TResult> typedVisitor = visitor as IFluentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 6, RULE_term);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CMT1) {
				{
				State = 103; comment1();
				}
			}

			State = 106; Match(T__0);
			State = 107; Match(IDENTIFIER);
			State = 108; Match(EQUALS);
			State = 109; expressionList();
			State = 113;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 110; attribute();
					}
					} 
				}
				State = 115;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : FluentTranslate.Parser.FluentContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentVisitor<TResult> typedVisitor = visitor as IFluentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 8, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 116; expression();
				}
				}
				State = 119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << INLINE_CHAR) | (1L << WS))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : FluentTranslate.Parser.FluentContext {
		public TextInlineContext textInline() {
			return GetRuleContext<TextInlineContext>(0);
		}
		public TextBlockContext textBlock() {
			return GetRuleContext<TextBlockContext>(0);
		}
		public PlaceableInlineContext placeableInline() {
			return GetRuleContext<PlaceableInlineContext>(0);
		}
		public PlaceableBlockContext placeableBlock() {
			return GetRuleContext<PlaceableBlockContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentVisitor<TResult> typedVisitor = visitor as IFluentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 10, RULE_expression);
		try {
			State = 125;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 121; textInline();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 122; textBlock();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 123; placeableInline();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 124; placeableBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : FluentTranslate.Parser.FluentContext {
		public ITerminalNode LINE_END() { return GetToken(FluentParser.LINE_END, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(FluentParser.IDENTIFIER, 0); }
		public ITerminalNode EQUALS() { return GetToken(FluentParser.EQUALS, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ITerminalNode WS() { return GetToken(FluentParser.WS, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentVisitor<TResult> typedVisitor = visitor as IFluentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 12, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127; Match(LINE_END);
			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 128; Match(WS);
				}
			}

			State = 131; Match(T__1);
			State = 132; Match(IDENTIFIER);
			State = 133; Match(EQUALS);
			State = 134; expressionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextInlineContext : FluentTranslate.Parser.FluentContext {
		public ITerminalNode[] INLINE_CHAR() { return GetTokens(FluentParser.INLINE_CHAR); }
		public ITerminalNode INLINE_CHAR(int i) {
			return GetToken(FluentParser.INLINE_CHAR, i);
		}
		public TextInlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textInline; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentVisitor<TResult> typedVisitor = visitor as IFluentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextInline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextInlineContext textInline() {
		TextInlineContext _localctx = new TextInlineContext(Context, State);
		EnterRule(_localctx, 14, RULE_textInline);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 136; Match(INLINE_CHAR);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 139;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextBlockContext : FluentTranslate.Parser.FluentContext {
		public ITerminalNode WS() { return GetToken(FluentParser.WS, 0); }
		public ITerminalNode SPACES() { return GetToken(FluentParser.SPACES, 0); }
		public ITerminalNode INDENTED_CHAR() { return GetToken(FluentParser.INDENTED_CHAR, 0); }
		public TextInlineContext textInline() {
			return GetRuleContext<TextInlineContext>(0);
		}
		public TextBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentVisitor<TResult> typedVisitor = visitor as IFluentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextBlockContext textBlock() {
		TextBlockContext _localctx = new TextBlockContext(Context, State);
		EnterRule(_localctx, 16, RULE_textBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141; Match(WS);
			State = 142; Match(SPACES);
			State = 143; Match(INDENTED_CHAR);
			State = 144; textInline();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlaceableInlineContext : FluentTranslate.Parser.FluentContext {
		public SelectExpressionContext selectExpression() {
			return GetRuleContext<SelectExpressionContext>(0);
		}
		public InlineExpressionContext inlineExpression() {
			return GetRuleContext<InlineExpressionContext>(0);
		}
		public ITerminalNode[] SPACES() { return GetTokens(FluentParser.SPACES); }
		public ITerminalNode SPACES(int i) {
			return GetToken(FluentParser.SPACES, i);
		}
		public PlaceableInlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_placeableInline; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentVisitor<TResult> typedVisitor = visitor as IFluentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlaceableInline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlaceableInlineContext placeableInline() {
		PlaceableInlineContext _localctx = new PlaceableInlineContext(Context, State);
		EnterRule(_localctx, 18, RULE_placeableInline);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; Match(T__2);
			State = 148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SPACES) {
				{
				State = 147; Match(SPACES);
				}
			}

			State = 152;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 150; selectExpression();
				}
				break;
			case 2:
				{
				State = 151; inlineExpression();
				}
				break;
			}
			State = 155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SPACES) {
				{
				State = 154; Match(SPACES);
				}
			}

			State = 157; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlaceableBlockContext : FluentTranslate.Parser.FluentContext {
		public ITerminalNode WS() { return GetToken(FluentParser.WS, 0); }
		public PlaceableInlineContext placeableInline() {
			return GetRuleContext<PlaceableInlineContext>(0);
		}
		public PlaceableBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_placeableBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentVisitor<TResult> typedVisitor = visitor as IFluentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlaceableBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlaceableBlockContext placeableBlock() {
		PlaceableBlockContext _localctx = new PlaceableBlockContext(Context, State);
		EnterRule(_localctx, 20, RULE_placeableBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159; Match(WS);
			State = 160; placeableInline();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectExpressionContext : FluentTranslate.Parser.FluentContext {
		public InlineExpressionContext inlineExpression() {
			return GetRuleContext<InlineExpressionContext>(0);
		}
		public VariantListContext variantList() {
			return GetRuleContext<VariantListContext>(0);
		}
		public ITerminalNode WS() { return GetToken(FluentParser.WS, 0); }
		public ITerminalNode SPACES() { return GetToken(FluentParser.SPACES, 0); }
		public SelectExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentVisitor<TResult> typedVisitor = visitor as IFluentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectExpressionContext selectExpression() {
		SelectExpressionContext _localctx = new SelectExpressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_selectExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; inlineExpression();
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 163; Match(WS);
				}
			}

			State = 166; Match(T__4);
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SPACES) {
				{
				State = 167; Match(SPACES);
				}
			}

			State = 170; variantList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineExpressionContext : FluentTranslate.Parser.FluentContext {
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public FunctionReferenceContext functionReference() {
			return GetRuleContext<FunctionReferenceContext>(0);
		}
		public MessageReferenceContext messageReference() {
			return GetRuleContext<MessageReferenceContext>(0);
		}
		public TermReferenceContext termReference() {
			return GetRuleContext<TermReferenceContext>(0);
		}
		public VariableReferenceContext variableReference() {
			return GetRuleContext<VariableReferenceContext>(0);
		}
		public PlaceableInlineContext placeableInline() {
			return GetRuleContext<PlaceableInlineContext>(0);
		}
		public InlineExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentVisitor<TResult> typedVisitor = visitor as IFluentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineExpressionContext inlineExpression() {
		InlineExpressionContext _localctx = new InlineExpressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_inlineExpression);
		try {
			State = 179;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 172; stringLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 173; numberLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 174; functionReference();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 175; messageReference();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 176; termReference();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 177; variableReference();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 178; placeableInline();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionReferenceContext : FluentTranslate.Parser.FluentContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FluentParser.IDENTIFIER, 0); }
		public CallArgumentsContext callArguments() {
			return GetRuleContext<CallArgumentsContext>(0);
		}
		public FunctionReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionReference; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentVisitor<TResult> typedVisitor = visitor as IFluentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionReferenceContext functionReference() {
		FunctionReferenceContext _localctx = new FunctionReferenceContext(Context, State);
		EnterRule(_localctx, 26, RULE_functionReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181; Match(IDENTIFIER);
			State = 182; callArguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageReferenceContext : FluentTranslate.Parser.FluentContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FluentParser.IDENTIFIER, 0); }
		public AttributeAccessorContext attributeAccessor() {
			return GetRuleContext<AttributeAccessorContext>(0);
		}
		public MessageReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageReference; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentVisitor<TResult> typedVisitor = visitor as IFluentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageReferenceContext messageReference() {
		MessageReferenceContext _localctx = new MessageReferenceContext(Context, State);
		EnterRule(_localctx, 28, RULE_messageReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184; Match(IDENTIFIER);
			State = 186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 185; attributeAccessor();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermReferenceContext : FluentTranslate.Parser.FluentContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FluentParser.IDENTIFIER, 0); }
		public AttributeAccessorContext attributeAccessor() {
			return GetRuleContext<AttributeAccessorContext>(0);
		}
		public CallArgumentsContext callArguments() {
			return GetRuleContext<CallArgumentsContext>(0);
		}
		public TermReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_termReference; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentVisitor<TResult> typedVisitor = visitor as IFluentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermReferenceContext termReference() {
		TermReferenceContext _localctx = new TermReferenceContext(Context, State);
		EnterRule(_localctx, 30, RULE_termReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188; Match(T__0);
			State = 189; Match(IDENTIFIER);
			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 190; attributeAccessor();
				}
			}

			State = 194;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 193; callArguments();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableReferenceContext : FluentTranslate.Parser.FluentContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FluentParser.IDENTIFIER, 0); }
		public VariableReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableReference; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentVisitor<TResult> typedVisitor = visitor as IFluentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableReferenceContext variableReference() {
		VariableReferenceContext _localctx = new VariableReferenceContext(Context, State);
		EnterRule(_localctx, 32, RULE_variableReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; Match(T__5);
			State = 197; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeAccessorContext : FluentTranslate.Parser.FluentContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FluentParser.IDENTIFIER, 0); }
		public AttributeAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeAccessor; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentVisitor<TResult> typedVisitor = visitor as IFluentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeAccessor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeAccessorContext attributeAccessor() {
		AttributeAccessorContext _localctx = new AttributeAccessorContext(Context, State);
		EnterRule(_localctx, 34, RULE_attributeAccessor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199; Match(T__1);
			State = 200; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallArgumentsContext : FluentTranslate.Parser.FluentContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(FluentParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(FluentParser.WS, i);
		}
		public CallArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callArguments; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentVisitor<TResult> typedVisitor = visitor as IFluentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallArgumentsContext callArguments() {
		CallArgumentsContext _localctx = new CallArgumentsContext(Context, State);
		EnterRule(_localctx, 36, RULE_callArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 202; Match(WS);
				}
			}

			State = 205; Match(T__6);
			State = 207;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 206; Match(WS);
				}
				break;
			}
			State = 209; argumentList();
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 210; Match(WS);
				}
			}

			State = 213; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : FluentTranslate.Parser.FluentContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(FluentParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(FluentParser.WS, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentVisitor<TResult> typedVisitor = visitor as IFluentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 38, RULE_argumentList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 215; argument();
					State = 217;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WS) {
						{
						State = 216; Match(WS);
						}
					}

					State = 219; Match(T__8);
					State = 221;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
					case 1:
						{
						State = 220; Match(WS);
						}
						break;
					}
					}
					} 
				}
				State = 227;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			State = 229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__5) | (1L << STRING_LITERAL) | (1L << NUMBER_LITERAL) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 228; argument();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : FluentTranslate.Parser.FluentContext {
		public NamedArgumentContext namedArgument() {
			return GetRuleContext<NamedArgumentContext>(0);
		}
		public InlineExpressionContext inlineExpression() {
			return GetRuleContext<InlineExpressionContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentVisitor<TResult> typedVisitor = visitor as IFluentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 40, RULE_argument);
		try {
			State = 233;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 231; namedArgument();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 232; inlineExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedArgumentContext : FluentTranslate.Parser.FluentContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FluentParser.IDENTIFIER, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(FluentParser.STRING_LITERAL, 0); }
		public ITerminalNode NUMBER_LITERAL() { return GetToken(FluentParser.NUMBER_LITERAL, 0); }
		public ITerminalNode[] WS() { return GetTokens(FluentParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(FluentParser.WS, i);
		}
		public NamedArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedArgument; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentVisitor<TResult> typedVisitor = visitor as IFluentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedArgumentContext namedArgument() {
		NamedArgumentContext _localctx = new NamedArgumentContext(Context, State);
		EnterRule(_localctx, 42, RULE_namedArgument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235; Match(IDENTIFIER);
			State = 237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 236; Match(WS);
				}
			}

			State = 239; Match(T__9);
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 240; Match(WS);
				}
			}

			State = 243;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING_LITERAL || _la==NUMBER_LITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariantListContext : FluentTranslate.Parser.FluentContext {
		public DefaultVariantContext defaultVariant() {
			return GetRuleContext<DefaultVariantContext>(0);
		}
		public ITerminalNode LINE_END() { return GetToken(FluentParser.LINE_END, 0); }
		public VariantContext[] variant() {
			return GetRuleContexts<VariantContext>();
		}
		public VariantContext variant(int i) {
			return GetRuleContext<VariantContext>(i);
		}
		public VariantListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variantList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentVisitor<TResult> typedVisitor = visitor as IFluentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariantList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariantListContext variantList() {
		VariantListContext _localctx = new VariantListContext(Context, State);
		EnterRule(_localctx, 44, RULE_variantList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LINE_END) {
				{
				{
				State = 245; variant();
				}
				}
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 251; defaultVariant();
			State = 255;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 252; variant();
					}
					} 
				}
				State = 257;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			State = 258; Match(LINE_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultVariantContext : FluentTranslate.Parser.FluentContext {
		public VariantContext variant() {
			return GetRuleContext<VariantContext>(0);
		}
		public DefaultVariantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultVariant; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentVisitor<TResult> typedVisitor = visitor as IFluentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultVariant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultVariantContext defaultVariant() {
		DefaultVariantContext _localctx = new DefaultVariantContext(Context, State);
		EnterRule(_localctx, 46, RULE_defaultVariant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260; Match(T__10);
			State = 261; variant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariantContext : FluentTranslate.Parser.FluentContext {
		public ITerminalNode LINE_END() { return GetToken(FluentParser.LINE_END, 0); }
		public VariantKeyContext variantKey() {
			return GetRuleContext<VariantKeyContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ITerminalNode WS() { return GetToken(FluentParser.WS, 0); }
		public ITerminalNode SPACES() { return GetToken(FluentParser.SPACES, 0); }
		public VariantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variant; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentVisitor<TResult> typedVisitor = visitor as IFluentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariantContext variant() {
		VariantContext _localctx = new VariantContext(Context, State);
		EnterRule(_localctx, 48, RULE_variant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263; Match(LINE_END);
			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 264; Match(WS);
				}
			}

			State = 267; variantKey();
			State = 269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SPACES) {
				{
				State = 268; Match(SPACES);
				}
			}

			State = 271; expressionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariantKeyContext : FluentTranslate.Parser.FluentContext {
		public ITerminalNode NUMBER_LITERAL() { return GetToken(FluentParser.NUMBER_LITERAL, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(FluentParser.IDENTIFIER, 0); }
		public ITerminalNode SPACES() { return GetToken(FluentParser.SPACES, 0); }
		public VariantKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variantKey; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentVisitor<TResult> typedVisitor = visitor as IFluentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariantKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariantKeyContext variantKey() {
		VariantKeyContext _localctx = new VariantKeyContext(Context, State);
		EnterRule(_localctx, 50, RULE_variantKey);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273; Match(T__11);
			State = 275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SPACES) {
				{
				State = 274; Match(SPACES);
				}
			}

			State = 277;
			_la = TokenStream.LA(1);
			if ( !(_la==NUMBER_LITERAL || _la==IDENTIFIER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 278; Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : FluentTranslate.Parser.FluentContext {
		public ITerminalNode STRING_LITERAL() { return GetToken(FluentParser.STRING_LITERAL, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentVisitor<TResult> typedVisitor = visitor as IFluentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 52, RULE_stringLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280; Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberLiteralContext : FluentTranslate.Parser.FluentContext {
		public ITerminalNode NUMBER_LITERAL() { return GetToken(FluentParser.NUMBER_LITERAL, 0); }
		public NumberLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentVisitor<TResult> typedVisitor = visitor as IFluentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberLiteralContext numberLiteral() {
		NumberLiteralContext _localctx = new NumberLiteralContext(Context, State);
		EnterRule(_localctx, 54, RULE_numberLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282; Match(NUMBER_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : FluentTranslate.Parser.FluentContext {
		public Comment3Context comment3() {
			return GetRuleContext<Comment3Context>(0);
		}
		public Comment2Context comment2() {
			return GetRuleContext<Comment2Context>(0);
		}
		public Comment1Context comment1() {
			return GetRuleContext<Comment1Context>(0);
		}
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentVisitor<TResult> typedVisitor = visitor as IFluentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 56, RULE_comment);
		try {
			State = 287;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CMT3:
				EnterOuterAlt(_localctx, 1);
				{
				State = 284; comment3();
				}
				break;
			case CMT2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 285; comment2();
				}
				break;
			case CMT1:
				EnterOuterAlt(_localctx, 3);
				{
				State = 286; comment1();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comment3Context : FluentTranslate.Parser.FluentContext {
		public CommentLine3Context[] commentLine3() {
			return GetRuleContexts<CommentLine3Context>();
		}
		public CommentLine3Context commentLine3(int i) {
			return GetRuleContext<CommentLine3Context>(i);
		}
		public Comment3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment3; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentVisitor<TResult> typedVisitor = visitor as IFluentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comment3Context comment3() {
		Comment3Context _localctx = new Comment3Context(Context, State);
		EnterRule(_localctx, 58, RULE_comment3);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 290;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 289; commentLine3();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 292;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comment2Context : FluentTranslate.Parser.FluentContext {
		public CommentLine2Context[] commentLine2() {
			return GetRuleContexts<CommentLine2Context>();
		}
		public CommentLine2Context commentLine2(int i) {
			return GetRuleContext<CommentLine2Context>(i);
		}
		public Comment2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment2; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentVisitor<TResult> typedVisitor = visitor as IFluentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comment2Context comment2() {
		Comment2Context _localctx = new Comment2Context(Context, State);
		EnterRule(_localctx, 60, RULE_comment2);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 294; commentLine2();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 297;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comment1Context : FluentTranslate.Parser.FluentContext {
		public CommentLine1Context[] commentLine1() {
			return GetRuleContexts<CommentLine1Context>();
		}
		public CommentLine1Context commentLine1(int i) {
			return GetRuleContext<CommentLine1Context>(i);
		}
		public Comment1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment1; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentVisitor<TResult> typedVisitor = visitor as IFluentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comment1Context comment1() {
		Comment1Context _localctx = new Comment1Context(Context, State);
		EnterRule(_localctx, 62, RULE_comment1);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 299; commentLine1();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 302;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentLine3Context : FluentTranslate.Parser.FluentContext {
		public ITerminalNode CMT3() { return GetToken(FluentParser.CMT3, 0); }
		public ITerminalNode LINE_END() { return GetToken(FluentParser.LINE_END, 0); }
		public ITerminalNode COMMENT() { return GetToken(FluentParser.COMMENT, 0); }
		public CommentLine3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentLine3; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentVisitor<TResult> typedVisitor = visitor as IFluentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentLine3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentLine3Context commentLine3() {
		CommentLine3Context _localctx = new CommentLine3Context(Context, State);
		EnterRule(_localctx, 64, RULE_commentLine3);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304; Match(CMT3);
			State = 307;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 305; Match(T__13);
				State = 306; Match(COMMENT);
				}
			}

			State = 309; Match(LINE_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentLine2Context : FluentTranslate.Parser.FluentContext {
		public ITerminalNode CMT2() { return GetToken(FluentParser.CMT2, 0); }
		public ITerminalNode LINE_END() { return GetToken(FluentParser.LINE_END, 0); }
		public ITerminalNode COMMENT() { return GetToken(FluentParser.COMMENT, 0); }
		public CommentLine2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentLine2; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentVisitor<TResult> typedVisitor = visitor as IFluentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentLine2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentLine2Context commentLine2() {
		CommentLine2Context _localctx = new CommentLine2Context(Context, State);
		EnterRule(_localctx, 66, RULE_commentLine2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311; Match(CMT2);
			State = 314;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 312; Match(T__13);
				State = 313; Match(COMMENT);
				}
			}

			State = 316; Match(LINE_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentLine1Context : FluentTranslate.Parser.FluentContext {
		public ITerminalNode CMT1() { return GetToken(FluentParser.CMT1, 0); }
		public ITerminalNode LINE_END() { return GetToken(FluentParser.LINE_END, 0); }
		public ITerminalNode COMMENT() { return GetToken(FluentParser.COMMENT, 0); }
		public CommentLine1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentLine1; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentVisitor<TResult> typedVisitor = visitor as IFluentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentLine1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentLine1Context commentLine1() {
		CommentLine1Context _localctx = new CommentLine1Context(Context, State);
		EnterRule(_localctx, 68, RULE_commentLine1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318; Match(CMT1);
			State = 321;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 319; Match(T__13);
				State = 320; Match(COMMENT);
				}
			}

			State = 323; Match(LINE_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyLineContext : FluentTranslate.Parser.FluentContext {
		public ITerminalNode LINE_END() { return GetToken(FluentParser.LINE_END, 0); }
		public EmptyLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyLine; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentVisitor<TResult> typedVisitor = visitor as IFluentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyLineContext emptyLine() {
		EmptyLineContext _localctx = new EmptyLineContext(Context, State);
		EnterRule(_localctx, 70, RULE_emptyLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__13 || _la==T__14) {
				{
				{
				State = 325;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__14) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 330;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 331; Match(LINE_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\"', '\x150', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x3', '\x2', 
		'\a', '\x2', 'L', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 'O', '\v', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'U', '\n', '\x3', '\x3', '\x4', '\x5', '\x4', 'X', '\n', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '^', '\n', 
		'\x4', '\f', '\x4', '\xE', '\x4', '\x61', '\v', '\x4', '\x3', '\x4', '\x6', 
		'\x4', '\x64', '\n', '\x4', '\r', '\x4', '\xE', '\x4', '\x65', '\x5', 
		'\x4', 'h', '\n', '\x4', '\x3', '\x5', '\x5', '\x5', 'k', '\n', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\a', '\x5', 'r', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 'u', '\v', '\x5', 
		'\x3', '\x6', '\x6', '\x6', 'x', '\n', '\x6', '\r', '\x6', '\xE', '\x6', 
		'y', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'\x80', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x84', '\n', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x6', '\t', '\x8C', '\n', '\t', '\r', '\t', '\xE', '\t', 
		'\x8D', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\v', '\x3', '\v', '\x5', '\v', '\x97', '\n', '\v', '\x3', '\v', 
		'\x3', '\v', '\x5', '\v', '\x9B', '\n', '\v', '\x3', '\v', '\x5', '\v', 
		'\x9E', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xA7', '\n', '\r', 
		'\x3', '\r', '\x3', '\r', '\x5', '\r', '\xAB', '\n', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xB6', '\n', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x5', '\x10', '\xBD', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\xC2', '\n', '\x11', '\x3', '\x11', '\x5', '\x11', 
		'\xC5', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x5', '\x14', '\xCE', 
		'\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xD2', '\n', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xD6', '\n', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', 
		'\xDC', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\xE0', 
		'\n', '\x15', '\a', '\x15', '\xE2', '\n', '\x15', '\f', '\x15', '\xE', 
		'\x15', '\xE5', '\v', '\x15', '\x3', '\x15', '\x5', '\x15', '\xE8', '\n', 
		'\x15', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\xEC', '\n', '\x16', 
		'\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\xF0', '\n', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x5', '\x17', '\xF4', '\n', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x18', '\a', '\x18', '\xF9', '\n', '\x18', '\f', 
		'\x18', '\xE', '\x18', '\xFC', '\v', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\a', '\x18', '\x100', '\n', '\x18', '\f', '\x18', '\xE', '\x18', '\x103', 
		'\v', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x10C', '\n', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x110', '\n', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', 
		'\x116', '\n', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x122', '\n', '\x1E', '\x3', '\x1F', 
		'\x6', '\x1F', '\x125', '\n', '\x1F', '\r', '\x1F', '\xE', '\x1F', '\x126', 
		'\x3', ' ', '\x6', ' ', '\x12A', '\n', ' ', '\r', ' ', '\xE', ' ', '\x12B', 
		'\x3', '!', '\x6', '!', '\x12F', '\n', '!', '\r', '!', '\xE', '!', '\x130', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x136', '\n', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x5', '#', 
		'\x13D', '\n', '#', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x5', '$', '\x144', '\n', '$', '\x3', '$', '\x3', '$', '\x3', '%', 
		'\a', '%', '\x149', '\n', '%', '\f', '%', '\xE', '%', '\x14C', '\v', '%', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x2', '\x2', '&', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', 
		'\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 
		'\x2', '\x5', '\x3', '\x2', '\x17', '\x18', '\x3', '\x2', '\x18', '\x19', 
		'\x3', '\x2', '\x10', '\x11', '\x2', '\x161', '\x2', 'M', '\x3', '\x2', 
		'\x2', '\x2', '\x4', 'T', '\x3', '\x2', '\x2', '\x2', '\x6', 'W', '\x3', 
		'\x2', '\x2', '\x2', '\b', 'j', '\x3', '\x2', '\x2', '\x2', '\n', 'w', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\x7F', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\x81', '\x3', '\x2', '\x2', '\x2', '\x10', '\x8B', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x14', '\x94', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\xA1', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\xA4', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xB5', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\xB7', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xBA', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\xBE', '\x3', '\x2', '\x2', '\x2', '\"', 
		'\xC6', '\x3', '\x2', '\x2', '\x2', '$', '\xC9', '\x3', '\x2', '\x2', 
		'\x2', '&', '\xCD', '\x3', '\x2', '\x2', '\x2', '(', '\xE3', '\x3', '\x2', 
		'\x2', '\x2', '*', '\xEB', '\x3', '\x2', '\x2', '\x2', ',', '\xED', '\x3', 
		'\x2', '\x2', '\x2', '.', '\xFA', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\x106', '\x3', '\x2', '\x2', '\x2', '\x32', '\x109', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x113', '\x3', '\x2', '\x2', '\x2', '\x36', '\x11A', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x11C', '\x3', '\x2', '\x2', '\x2', ':', 
		'\x121', '\x3', '\x2', '\x2', '\x2', '<', '\x124', '\x3', '\x2', '\x2', 
		'\x2', '>', '\x129', '\x3', '\x2', '\x2', '\x2', '@', '\x12E', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x132', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x139', '\x3', '\x2', '\x2', '\x2', '\x46', '\x140', '\x3', '\x2', '\x2', 
		'\x2', 'H', '\x14A', '\x3', '\x2', '\x2', '\x2', 'J', 'L', '\x5', '\x4', 
		'\x3', '\x2', 'K', 'J', '\x3', '\x2', '\x2', '\x2', 'L', 'O', '\x3', '\x2', 
		'\x2', '\x2', 'M', 'K', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\x3', '\x2', 
		'\x2', '\x2', 'N', '\x3', '\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', 
		'\x2', '\x2', '\x2', 'P', 'U', '\x5', '\x6', '\x4', '\x2', 'Q', 'U', '\x5', 
		'\b', '\x5', '\x2', 'R', 'U', '\x5', ':', '\x1E', '\x2', 'S', 'U', '\x5', 
		'H', '%', '\x2', 'T', 'P', '\x3', '\x2', '\x2', '\x2', 'T', 'Q', '\x3', 
		'\x2', '\x2', '\x2', 'T', 'R', '\x3', '\x2', '\x2', '\x2', 'T', 'S', '\x3', 
		'\x2', '\x2', '\x2', 'U', '\x5', '\x3', '\x2', '\x2', '\x2', 'V', 'X', 
		'\x5', '@', '!', '\x2', 'W', 'V', '\x3', '\x2', '\x2', '\x2', 'W', 'X', 
		'\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\x3', '\x2', '\x2', '\x2', 'Y', 
		'Z', '\a', '\x19', '\x2', '\x2', 'Z', 'g', '\a', '\x1A', '\x2', '\x2', 
		'[', '_', '\x5', '\n', '\x6', '\x2', '\\', '^', '\x5', '\xE', '\b', '\x2', 
		']', '\\', '\x3', '\x2', '\x2', '\x2', '^', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '_', ']', '\x3', '\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', 
		'\x2', '`', 'h', '\x3', '\x2', '\x2', '\x2', '\x61', '_', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x64', '\x5', '\xE', '\b', '\x2', '\x63', '\x62', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'\x65', '\x63', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\x3', '\x2', 
		'\x2', '\x2', '\x66', 'h', '\x3', '\x2', '\x2', '\x2', 'g', '[', '\x3', 
		'\x2', '\x2', '\x2', 'g', '\x63', '\x3', '\x2', '\x2', '\x2', 'h', '\a', 
		'\x3', '\x2', '\x2', '\x2', 'i', 'k', '\x5', '@', '!', '\x2', 'j', 'i', 
		'\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x3', '\x2', '\x2', '\x2', 'k', 
		'l', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\a', '\x3', '\x2', '\x2', 
		'm', 'n', '\a', '\x19', '\x2', '\x2', 'n', 'o', '\a', '\x1A', '\x2', '\x2', 
		'o', 's', '\x5', '\n', '\x6', '\x2', 'p', 'r', '\x5', '\xE', '\b', '\x2', 
		'q', 'p', '\x3', '\x2', '\x2', '\x2', 'r', 'u', '\x3', '\x2', '\x2', '\x2', 
		's', 'q', '\x3', '\x2', '\x2', '\x2', 's', 't', '\x3', '\x2', '\x2', '\x2', 
		't', '\t', '\x3', '\x2', '\x2', '\x2', 'u', 's', '\x3', '\x2', '\x2', 
		'\x2', 'v', 'x', '\x5', '\f', '\a', '\x2', 'w', 'v', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'y', '\x3', '\x2', '\x2', '\x2', 'y', 'w', '\x3', '\x2', '\x2', 
		'\x2', 'y', 'z', '\x3', '\x2', '\x2', '\x2', 'z', '\v', '\x3', '\x2', 
		'\x2', '\x2', '{', '\x80', '\x5', '\x10', '\t', '\x2', '|', '\x80', '\x5', 
		'\x12', '\n', '\x2', '}', '\x80', '\x5', '\x14', '\v', '\x2', '~', '\x80', 
		'\x5', '\x16', '\f', '\x2', '\x7F', '{', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'|', '\x3', '\x2', '\x2', '\x2', '\x7F', '}', '\x3', '\x2', '\x2', '\x2', 
		'\x7F', '~', '\x3', '\x2', '\x2', '\x2', '\x80', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x81', '\x83', '\a', ' ', '\x2', '\x2', '\x82', '\x84', '\a', 
		'\x1B', '\x2', '\x2', '\x83', '\x82', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'\x84', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\x85', '\x86', '\a', '\x4', '\x2', '\x2', '\x86', '\x87', '\a', 
		'\x19', '\x2', '\x2', '\x87', '\x88', '\a', '\x1A', '\x2', '\x2', '\x88', 
		'\x89', '\x5', '\n', '\x6', '\x2', '\x89', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x8C', '\a', '\x12', '\x2', '\x2', '\x8B', '\x8A', '\x3', 
		'\x2', '\x2', '\x2', '\x8C', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\x3', '\x2', '\x2', 
		'\x2', '\x8E', '\x11', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\a', 
		'\x1B', '\x2', '\x2', '\x90', '\x91', '\a', '\x1C', '\x2', '\x2', '\x91', 
		'\x92', '\a', '\x13', '\x2', '\x2', '\x92', '\x93', '\x5', '\x10', '\t', 
		'\x2', '\x93', '\x13', '\x3', '\x2', '\x2', '\x2', '\x94', '\x96', '\a', 
		'\x5', '\x2', '\x2', '\x95', '\x97', '\a', '\x1C', '\x2', '\x2', '\x96', 
		'\x95', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\x3', '\x2', '\x2', 
		'\x2', '\x97', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x98', '\x9B', '\x5', 
		'\x18', '\r', '\x2', '\x99', '\x9B', '\x5', '\x1A', '\xE', '\x2', '\x9A', 
		'\x98', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '\x9B', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9E', '\a', 
		'\x1C', '\x2', '\x2', '\x9D', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9D', 
		'\x9E', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', '\x9F', '\xA0', '\a', '\x6', '\x2', '\x2', '\xA0', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\xA1', '\xA2', '\a', '\x1B', '\x2', '\x2', '\xA2', 
		'\xA3', '\x5', '\x14', '\v', '\x2', '\xA3', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\xA6', '\x5', '\x1A', '\xE', '\x2', '\xA5', '\xA7', '\a', 
		'\x1B', '\x2', '\x2', '\xA6', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA6', 
		'\xA7', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', '\x3', '\x2', '\x2', 
		'\x2', '\xA8', '\xAA', '\a', '\a', '\x2', '\x2', '\xA9', '\xAB', '\a', 
		'\x1C', '\x2', '\x2', '\xAA', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAA', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', '\x3', '\x2', '\x2', 
		'\x2', '\xAC', '\xAD', '\x5', '.', '\x18', '\x2', '\xAD', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\xAE', '\xB6', '\x5', '\x36', '\x1C', '\x2', '\xAF', 
		'\xB6', '\x5', '\x38', '\x1D', '\x2', '\xB0', '\xB6', '\x5', '\x1C', '\xF', 
		'\x2', '\xB1', '\xB6', '\x5', '\x1E', '\x10', '\x2', '\xB2', '\xB6', '\x5', 
		' ', '\x11', '\x2', '\xB3', '\xB6', '\x5', '\"', '\x12', '\x2', '\xB4', 
		'\xB6', '\x5', '\x14', '\v', '\x2', '\xB5', '\xAE', '\x3', '\x2', '\x2', 
		'\x2', '\xB5', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB0', '\x3', 
		'\x2', '\x2', '\x2', '\xB5', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB5', 
		'\xB2', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB3', '\x3', '\x2', '\x2', 
		'\x2', '\xB5', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB6', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\xB7', '\xB8', '\a', '\x19', '\x2', '\x2', '\xB8', 
		'\xB9', '\x5', '&', '\x14', '\x2', '\xB9', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\xBA', '\xBC', '\a', '\x19', '\x2', '\x2', '\xBB', '\xBD', '\x5', 
		'$', '\x13', '\x2', '\xBC', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBC', 
		'\xBD', '\x3', '\x2', '\x2', '\x2', '\xBD', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\xBE', '\xBF', '\a', '\x3', '\x2', '\x2', '\xBF', '\xC1', '\a', 
		'\x19', '\x2', '\x2', '\xC0', '\xC2', '\x5', '$', '\x13', '\x2', '\xC1', 
		'\xC0', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\x3', '\x2', '\x2', 
		'\x2', '\xC2', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC5', '\x5', 
		'&', '\x14', '\x2', '\xC4', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC4', 
		'\xC5', '\x3', '\x2', '\x2', '\x2', '\xC5', '!', '\x3', '\x2', '\x2', 
		'\x2', '\xC6', '\xC7', '\a', '\b', '\x2', '\x2', '\xC7', '\xC8', '\a', 
		'\x19', '\x2', '\x2', '\xC8', '#', '\x3', '\x2', '\x2', '\x2', '\xC9', 
		'\xCA', '\a', '\x4', '\x2', '\x2', '\xCA', '\xCB', '\a', '\x19', '\x2', 
		'\x2', '\xCB', '%', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCE', '\a', 
		'\x1B', '\x2', '\x2', '\xCD', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCD', 
		'\xCE', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCF', '\x3', '\x2', '\x2', 
		'\x2', '\xCF', '\xD1', '\a', '\t', '\x2', '\x2', '\xD0', '\xD2', '\a', 
		'\x1B', '\x2', '\x2', '\xD1', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xD2', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '\xD3', '\xD5', '\x5', '(', '\x15', '\x2', '\xD4', '\xD6', '\a', 
		'\x1B', '\x2', '\x2', '\xD5', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD5', 
		'\xD6', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', '\x3', '\x2', '\x2', 
		'\x2', '\xD7', '\xD8', '\a', '\n', '\x2', '\x2', '\xD8', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\xD9', '\xDB', '\x5', '*', '\x16', '\x2', '\xDA', 
		'\xDC', '\a', '\x1B', '\x2', '\x2', '\xDB', '\xDA', '\x3', '\x2', '\x2', 
		'\x2', '\xDB', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDD', '\x3', 
		'\x2', '\x2', '\x2', '\xDD', '\xDF', '\a', '\v', '\x2', '\x2', '\xDE', 
		'\xE0', '\a', '\x1B', '\x2', '\x2', '\xDF', '\xDE', '\x3', '\x2', '\x2', 
		'\x2', '\xDF', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE2', '\x3', 
		'\x2', '\x2', '\x2', '\xE1', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xE2', 
		'\xE5', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE1', '\x3', '\x2', '\x2', 
		'\x2', '\xE3', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE7', '\x3', 
		'\x2', '\x2', '\x2', '\xE5', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE6', 
		'\xE8', '\x5', '*', '\x16', '\x2', '\xE7', '\xE6', '\x3', '\x2', '\x2', 
		'\x2', '\xE7', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xE8', ')', '\x3', 
		'\x2', '\x2', '\x2', '\xE9', '\xEC', '\x5', ',', '\x17', '\x2', '\xEA', 
		'\xEC', '\x5', '\x1A', '\xE', '\x2', '\xEB', '\xE9', '\x3', '\x2', '\x2', 
		'\x2', '\xEB', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEC', '+', '\x3', 
		'\x2', '\x2', '\x2', '\xED', '\xEF', '\a', '\x19', '\x2', '\x2', '\xEE', 
		'\xF0', '\a', '\x1B', '\x2', '\x2', '\xEF', '\xEE', '\x3', '\x2', '\x2', 
		'\x2', '\xEF', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xF1', '\x3', 
		'\x2', '\x2', '\x2', '\xF1', '\xF3', '\a', '\f', '\x2', '\x2', '\xF2', 
		'\xF4', '\a', '\x1B', '\x2', '\x2', '\xF3', '\xF2', '\x3', '\x2', '\x2', 
		'\x2', '\xF3', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF5', '\x3', 
		'\x2', '\x2', '\x2', '\xF5', '\xF6', '\t', '\x2', '\x2', '\x2', '\xF6', 
		'-', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF9', '\x5', '\x32', '\x1A', 
		'\x2', '\xF8', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFC', '\x3', 
		'\x2', '\x2', '\x2', '\xFA', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xFA', 
		'\xFB', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFD', '\x3', '\x2', '\x2', 
		'\x2', '\xFC', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFD', '\x101', '\x5', 
		'\x30', '\x19', '\x2', '\xFE', '\x100', '\x5', '\x32', '\x1A', '\x2', 
		'\xFF', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x100', '\x103', '\x3', '\x2', 
		'\x2', '\x2', '\x101', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x101', '\x102', 
		'\x3', '\x2', '\x2', '\x2', '\x102', '\x104', '\x3', '\x2', '\x2', '\x2', 
		'\x103', '\x101', '\x3', '\x2', '\x2', '\x2', '\x104', '\x105', '\a', 
		' ', '\x2', '\x2', '\x105', '/', '\x3', '\x2', '\x2', '\x2', '\x106', 
		'\x107', '\a', '\r', '\x2', '\x2', '\x107', '\x108', '\x5', '\x32', '\x1A', 
		'\x2', '\x108', '\x31', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10B', 
		'\a', ' ', '\x2', '\x2', '\x10A', '\x10C', '\a', '\x1B', '\x2', '\x2', 
		'\x10B', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10C', '\x3', 
		'\x2', '\x2', '\x2', '\x10C', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x10D', 
		'\x10F', '\x5', '\x34', '\x1B', '\x2', '\x10E', '\x110', '\a', '\x1C', 
		'\x2', '\x2', '\x10F', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x110', 
		'\x3', '\x2', '\x2', '\x2', '\x110', '\x111', '\x3', '\x2', '\x2', '\x2', 
		'\x111', '\x112', '\x5', '\n', '\x6', '\x2', '\x112', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\x113', '\x115', '\a', '\xE', '\x2', '\x2', '\x114', '\x116', 
		'\a', '\x1C', '\x2', '\x2', '\x115', '\x114', '\x3', '\x2', '\x2', '\x2', 
		'\x115', '\x116', '\x3', '\x2', '\x2', '\x2', '\x116', '\x117', '\x3', 
		'\x2', '\x2', '\x2', '\x117', '\x118', '\t', '\x3', '\x2', '\x2', '\x118', 
		'\x119', '\a', '\xF', '\x2', '\x2', '\x119', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x11A', '\x11B', '\a', '\x17', '\x2', '\x2', '\x11B', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x11C', '\x11D', '\a', '\x18', '\x2', '\x2', 
		'\x11D', '\x39', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x122', '\x5', 
		'<', '\x1F', '\x2', '\x11F', '\x122', '\x5', '>', ' ', '\x2', '\x120', 
		'\x122', '\x5', '@', '!', '\x2', '\x121', '\x11E', '\x3', '\x2', '\x2', 
		'\x2', '\x121', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x121', '\x120', 
		'\x3', '\x2', '\x2', '\x2', '\x122', ';', '\x3', '\x2', '\x2', '\x2', 
		'\x123', '\x125', '\x5', '\x42', '\"', '\x2', '\x124', '\x123', '\x3', 
		'\x2', '\x2', '\x2', '\x125', '\x126', '\x3', '\x2', '\x2', '\x2', '\x126', 
		'\x124', '\x3', '\x2', '\x2', '\x2', '\x126', '\x127', '\x3', '\x2', '\x2', 
		'\x2', '\x127', '=', '\x3', '\x2', '\x2', '\x2', '\x128', '\x12A', '\x5', 
		'\x44', '#', '\x2', '\x129', '\x128', '\x3', '\x2', '\x2', '\x2', '\x12A', 
		'\x12B', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x129', '\x3', '\x2', '\x2', 
		'\x2', '\x12B', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x12C', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x12D', '\x12F', '\x5', '\x46', '$', '\x2', '\x12E', 
		'\x12D', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x130', '\x3', '\x2', '\x2', 
		'\x2', '\x130', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x130', '\x131', 
		'\x3', '\x2', '\x2', '\x2', '\x131', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x132', '\x135', '\a', '\x1D', '\x2', '\x2', '\x133', '\x134', '\a', 
		'\x10', '\x2', '\x2', '\x134', '\x136', '\a', '\"', '\x2', '\x2', '\x135', 
		'\x133', '\x3', '\x2', '\x2', '\x2', '\x135', '\x136', '\x3', '\x2', '\x2', 
		'\x2', '\x136', '\x137', '\x3', '\x2', '\x2', '\x2', '\x137', '\x138', 
		'\a', ' ', '\x2', '\x2', '\x138', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x139', '\x13C', '\a', '\x1E', '\x2', '\x2', '\x13A', '\x13B', '\a', 
		'\x10', '\x2', '\x2', '\x13B', '\x13D', '\a', '\"', '\x2', '\x2', '\x13C', 
		'\x13A', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13D', '\x3', '\x2', '\x2', 
		'\x2', '\x13D', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x13F', 
		'\a', ' ', '\x2', '\x2', '\x13F', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x140', '\x143', '\a', '\x1F', '\x2', '\x2', '\x141', '\x142', '\a', 
		'\x10', '\x2', '\x2', '\x142', '\x144', '\a', '\"', '\x2', '\x2', '\x143', 
		'\x141', '\x3', '\x2', '\x2', '\x2', '\x143', '\x144', '\x3', '\x2', '\x2', 
		'\x2', '\x144', '\x145', '\x3', '\x2', '\x2', '\x2', '\x145', '\x146', 
		'\a', ' ', '\x2', '\x2', '\x146', 'G', '\x3', '\x2', '\x2', '\x2', '\x147', 
		'\x149', '\t', '\x4', '\x2', '\x2', '\x148', '\x147', '\x3', '\x2', '\x2', 
		'\x2', '\x149', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x148', 
		'\x3', '\x2', '\x2', '\x2', '\x14A', '\x14B', '\x3', '\x2', '\x2', '\x2', 
		'\x14B', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x14A', '\x3', 
		'\x2', '\x2', '\x2', '\x14D', '\x14E', '\a', ' ', '\x2', '\x2', '\x14E', 
		'I', '\x3', '\x2', '\x2', '\x2', '.', 'M', 'T', 'W', '_', '\x65', 'g', 
		'j', 's', 'y', '\x7F', '\x83', '\x8D', '\x96', '\x9A', '\x9D', '\xA6', 
		'\xAA', '\xB5', '\xBC', '\xC1', '\xC4', '\xCD', '\xD1', '\xD5', '\xDB', 
		'\xDF', '\xE3', '\xE7', '\xEB', '\xEF', '\xF3', '\xFA', '\x101', '\x10B', 
		'\x10F', '\x115', '\x121', '\x126', '\x12B', '\x130', '\x135', '\x13C', 
		'\x143', '\x14A',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
