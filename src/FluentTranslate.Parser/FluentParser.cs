//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:\projects\FluentTranslate\src\FluentTranslate.Parser\grammars\FluentParser.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace FluentTranslate.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class FluentParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NL=1, NL_INDENT=2, INDENT=3, TERM=4, IDENTIFIER=5, IDENTIFIER_REF=6, EQUALS=7, 
		TEXT=8, ATTRIBUTE=9, PLACEABLE_OPEN=10, PLACEABLE_CLOSE=11, STRING_OPEN=12, 
		NUMBER_LITERAL=13, VARIABLE_REF=14, TERM_REF=15, ATTRIBUTE_REF=16, SELECTOR=17, 
		CALL_OPEN=18, CALL_CLOSE=19, CALL_ARG_SEP=20, CALL_ARG_NAME_SEP=21, VARIANT_DEFAULT=22, 
		VARIANT_OPEN=23, VARIANT_CLOSE=24, COMMENT_OPEN=25, COMMENT=26, ESCAPED_CHAR=27, 
		UNICODE_ESCAPE=28, STRING_CLOSE=29, QUOTED_STRING=30, ML_VARIANT_DEFAULT=31, 
		ML_VARIANT_OPEN=32, PL_VARIABLE_REF=33, PL_TERM_REF=34, PL_ATTRIBUTE_REF=35, 
		CL_PLACEABLE_CLOSE=36, CL_CLOSE=37, CL_ARG_SEP=38, CL_ARG_NAME_SEP=39;
	public const int
		RULE_resource = 0, RULE_entry = 1, RULE_comment = 2, RULE_term = 3, RULE_message = 4, 
		RULE_record = 5, RULE_attributeList = 6, RULE_attribute = 7, RULE_expressionList = 8, 
		RULE_expression = 9, RULE_text = 10, RULE_indent = 11, RULE_ws = 12, RULE_placeable = 13, 
		RULE_placeableExpression = 14, RULE_selectExpression = 15, RULE_variantList = 16, 
		RULE_defaultVariant = 17, RULE_variant = 18, RULE_identifier = 19, RULE_inlineExpression = 20, 
		RULE_stringLiteral = 21, RULE_numberLiteral = 22, RULE_variableReference = 23, 
		RULE_termReference = 24, RULE_messageReference = 25, RULE_recordReference = 26, 
		RULE_attributeAccessor = 27, RULE_functionCall = 28, RULE_argumentList = 29, 
		RULE_argument = 30, RULE_namedArgument = 31, RULE_argumentExpression = 32, 
		RULE_emptyLine = 33;
	public static readonly string[] ruleNames = {
		"resource", "entry", "comment", "term", "message", "record", "attributeList", 
		"attribute", "expressionList", "expression", "text", "indent", "ws", "placeable", 
		"placeableExpression", "selectExpression", "variantList", "defaultVariant", 
		"variant", "identifier", "inlineExpression", "stringLiteral", "numberLiteral", 
		"variableReference", "termReference", "messageReference", "recordReference", 
		"attributeAccessor", "functionCall", "argumentList", "argument", "namedArgument", 
		"argumentExpression", "emptyLine"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "'\"'", null, null, null, null, null, null, 
		null, "')'", "','", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NL", "NL_INDENT", "INDENT", "TERM", "IDENTIFIER", "IDENTIFIER_REF", 
		"EQUALS", "TEXT", "ATTRIBUTE", "PLACEABLE_OPEN", "PLACEABLE_CLOSE", "STRING_OPEN", 
		"NUMBER_LITERAL", "VARIABLE_REF", "TERM_REF", "ATTRIBUTE_REF", "SELECTOR", 
		"CALL_OPEN", "CALL_CLOSE", "CALL_ARG_SEP", "CALL_ARG_NAME_SEP", "VARIANT_DEFAULT", 
		"VARIANT_OPEN", "VARIANT_CLOSE", "COMMENT_OPEN", "COMMENT", "ESCAPED_CHAR", 
		"UNICODE_ESCAPE", "STRING_CLOSE", "QUOTED_STRING", "ML_VARIANT_DEFAULT", 
		"ML_VARIANT_OPEN", "PL_VARIABLE_REF", "PL_TERM_REF", "PL_ATTRIBUTE_REF", 
		"CL_PLACEABLE_CLOSE", "CL_CLOSE", "CL_ARG_SEP", "CL_ARG_NAME_SEP"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FluentParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static FluentParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FluentParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FluentParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ResourceContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(FluentParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntryContext[] entry() {
			return GetRuleContexts<EntryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntryContext entry(int i) {
			return GetRuleContext<EntryContext>(i);
		}
		public ResourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceContext resource() {
		ResourceContext _localctx = new ResourceContext(Context, State);
		EnterRule(_localctx, 0, RULE_resource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NL) | (1L << NL_INDENT) | (1L << INDENT) | (1L << TERM) | (1L << IDENTIFIER) | (1L << COMMENT_OPEN))) != 0)) {
				{
				{
				State = 68;
				entry();
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 74;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntryContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessageContext message() {
			return GetRuleContext<MessageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLineContext emptyLine() {
			return GetRuleContext<EmptyLineContext>(0);
		}
		public EntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntryContext entry() {
		EntryContext _localctx = new EntryContext(Context, State);
		EnterRule(_localctx, 2, RULE_entry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TERM:
				{
				State = 76;
				term();
				}
				break;
			case IDENTIFIER:
				{
				State = 77;
				message();
				}
				break;
			case COMMENT_OPEN:
				{
				State = 78;
				comment();
				}
				break;
			case NL:
			case NL_INDENT:
			case INDENT:
				{
				State = 79;
				emptyLine();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_OPEN() { return GetToken(FluentParser.COMMENT_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(FluentParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(FluentParser.NL, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 4, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			Match(COMMENT_OPEN);
			State = 83;
			Match(COMMENT);
			State = 85;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 84;
				Match(NL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERM() { return GetToken(FluentParser.TERM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RecordContext record() {
			return GetRuleContext<RecordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeListContext attributeList() {
			return GetRuleContext<AttributeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(FluentParser.NL, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 6, RULE_term);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			Match(TERM);
			State = 88;
			record();
			State = 89;
			expressionList();
			State = 91;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 90;
				attributeList();
				}
				break;
			}
			State = 94;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 93;
				Match(NL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public RecordContext record() {
			return GetRuleContext<RecordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeListContext attributeList() {
			return GetRuleContext<AttributeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(FluentParser.NL, 0); }
		public MessageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_message; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageContext message() {
		MessageContext _localctx = new MessageContext(Context, State);
		EnterRule(_localctx, 8, RULE_message);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			record();
			State = 98;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 97;
				expressionList();
				}
				break;
			}
			State = 101;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 100;
				attributeList();
				}
				break;
			}
			State = 104;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 103;
				Match(NL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FluentParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(FluentParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INDENT() { return GetTokens(FluentParser.INDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT(int i) {
			return GetToken(FluentParser.INDENT, i);
		}
		public RecordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_record; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordContext record() {
		RecordContext _localctx = new RecordContext(Context, State);
		EnterRule(_localctx, 10, RULE_record);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			Match(IDENTIFIER);
			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDENT) {
				{
				State = 107;
				Match(INDENT);
				}
			}

			State = 110;
			Match(EQUALS);
			State = 112;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 111;
				Match(INDENT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeListContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public AttributeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeListContext attributeList() {
		AttributeListContext _localctx = new AttributeListContext(Context, State);
		EnterRule(_localctx, 12, RULE_attributeList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 114;
					attribute();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 117;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws() {
			return GetRuleContext<WsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE() { return GetToken(FluentParser.ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RecordContext record() {
			return GetRuleContext<RecordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 14, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			ws();
			State = 120;
			indent();
			State = 121;
			Match(ATTRIBUTE);
			State = 122;
			record();
			State = 123;
			expressionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 16, RULE_expressionList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 125;
					expression();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 128;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlaceableContext placeable() {
			return GetRuleContext<PlaceableContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_expression);
		try {
			State = 132;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 130;
				text();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 131;
				placeable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws() {
			return GetRuleContext<WsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(FluentParser.TEXT, 0); }
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 20, RULE_text);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			ws();
			State = 135;
			Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndentContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(FluentParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL_INDENT() { return GetToken(FluentParser.NL_INDENT, 0); }
		public IndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndentContext indent() {
		IndentContext _localctx = new IndentContext(Context, State);
		EnterRule(_localctx, 22, RULE_indent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			_la = TokenStream.LA(1);
			if ( !(_la==NL_INDENT || _la==INDENT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WsContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INDENT() { return GetTokens(FluentParser.INDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT(int i) {
			return GetToken(FluentParser.INDENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(FluentParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(FluentParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL_INDENT() { return GetTokens(FluentParser.NL_INDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL_INDENT(int i) {
			return GetToken(FluentParser.NL_INDENT, i);
		}
		public WsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ws; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WsContext ws() {
		WsContext _localctx = new WsContext(Context, State);
		EnterRule(_localctx, 24, RULE_ws);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 139;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NL) | (1L << NL_INDENT) | (1L << INDENT))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 144;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlaceableContext : FluentTranslate.Parser.FluentParserContext {
		public WsContext Prefix;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLACEABLE_OPEN() { return GetToken(FluentParser.PLACEABLE_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlaceableExpressionContext placeableExpression() {
			return GetRuleContext<PlaceableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLACEABLE_CLOSE() { return GetToken(FluentParser.PLACEABLE_CLOSE, 0); }
		public PlaceableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_placeable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlaceable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlaceableContext placeable() {
		PlaceableContext _localctx = new PlaceableContext(Context, State);
		EnterRule(_localctx, 26, RULE_placeable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			_localctx.Prefix = ws();
			State = 146;
			Match(PLACEABLE_OPEN);
			State = 147;
			ws();
			State = 148;
			placeableExpression();
			State = 149;
			ws();
			State = 150;
			Match(PLACEABLE_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlaceableExpressionContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectExpressionContext selectExpression() {
			return GetRuleContext<SelectExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InlineExpressionContext inlineExpression() {
			return GetRuleContext<InlineExpressionContext>(0);
		}
		public PlaceableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_placeableExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlaceableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlaceableExpressionContext placeableExpression() {
		PlaceableExpressionContext _localctx = new PlaceableExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_placeableExpression);
		try {
			State = 154;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 152;
				selectExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 153;
				inlineExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectExpressionContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public InlineExpressionContext inlineExpression() {
			return GetRuleContext<InlineExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECTOR() { return GetToken(FluentParser.SELECTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariantListContext variantList() {
			return GetRuleContext<VariantListContext>(0);
		}
		public SelectExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectExpressionContext selectExpression() {
		SelectExpressionContext _localctx = new SelectExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_selectExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			inlineExpression();
			State = 157;
			ws();
			State = 158;
			Match(SELECTOR);
			State = 159;
			ws();
			State = 160;
			variantList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariantListContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultVariantContext defaultVariant() {
			return GetRuleContext<DefaultVariantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariantContext[] variant() {
			return GetRuleContexts<VariantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariantContext variant(int i) {
			return GetRuleContext<VariantContext>(i);
		}
		public VariantListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variantList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariantList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariantListContext variantList() {
		VariantListContext _localctx = new VariantListContext(Context, State);
		EnterRule(_localctx, 32, RULE_variantList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 162;
					ws();
					State = 163;
					variant();
					}
					} 
				}
				State = 169;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			State = 170;
			ws();
			State = 171;
			defaultVariant();
			State = 177;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 172;
					ws();
					State = 173;
					variant();
					}
					} 
				}
				State = 179;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultVariantContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIANT_DEFAULT() { return GetToken(FluentParser.VARIANT_DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariantContext variant() {
			return GetRuleContext<VariantContext>(0);
		}
		public DefaultVariantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultVariant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultVariant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultVariantContext defaultVariant() {
		DefaultVariantContext _localctx = new DefaultVariantContext(Context, State);
		EnterRule(_localctx, 34, RULE_defaultVariant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			Match(VARIANT_DEFAULT);
			State = 181;
			variant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariantContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIANT_OPEN() { return GetToken(FluentParser.VARIANT_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIANT_CLOSE() { return GetToken(FluentParser.VARIANT_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_LITERAL() { return GetToken(FluentParser.NUMBER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INDENT() { return GetTokens(FluentParser.INDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT(int i) {
			return GetToken(FluentParser.INDENT, i);
		}
		public VariantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariantContext variant() {
		VariantContext _localctx = new VariantContext(Context, State);
		EnterRule(_localctx, 36, RULE_variant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			Match(VARIANT_OPEN);
			State = 185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDENT) {
				{
				State = 184;
				Match(INDENT);
				}
			}

			State = 189;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER_REF:
				{
				State = 187;
				identifier();
				}
				break;
			case NUMBER_LITERAL:
				{
				State = 188;
				Match(NUMBER_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDENT) {
				{
				State = 191;
				Match(INDENT);
				}
			}

			State = 194;
			Match(VARIANT_CLOSE);
			State = 195;
			expressionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER_REF() { return GetToken(FluentParser.IDENTIFIER_REF, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 38, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			Match(IDENTIFIER_REF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineExpressionContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableReferenceContext variableReference() {
			return GetRuleContext<VariableReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermReferenceContext termReference() {
			return GetRuleContext<TermReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessageReferenceContext messageReference() {
			return GetRuleContext<MessageReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlaceableContext placeable() {
			return GetRuleContext<PlaceableContext>(0);
		}
		public InlineExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineExpressionContext inlineExpression() {
		InlineExpressionContext _localctx = new InlineExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_inlineExpression);
		try {
			State = 206;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 199;
				stringLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 200;
				numberLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 201;
				functionCall();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 202;
				variableReference();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 203;
				termReference();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 204;
				messageReference();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 205;
				placeable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_OPEN() { return GetToken(FluentParser.STRING_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_CLOSE() { return GetToken(FluentParser.STRING_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ESCAPED_CHAR() { return GetTokens(FluentParser.ESCAPED_CHAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPED_CHAR(int i) {
			return GetToken(FluentParser.ESCAPED_CHAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UNICODE_ESCAPE() { return GetTokens(FluentParser.UNICODE_ESCAPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNICODE_ESCAPE(int i) {
			return GetToken(FluentParser.UNICODE_ESCAPE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QUOTED_STRING() { return GetTokens(FluentParser.QUOTED_STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTED_STRING(int i) {
			return GetToken(FluentParser.QUOTED_STRING, i);
		}
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 42, RULE_stringLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			Match(STRING_OPEN);
			State = 212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ESCAPED_CHAR) | (1L << UNICODE_ESCAPE) | (1L << QUOTED_STRING))) != 0)) {
				{
				{
				State = 209;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ESCAPED_CHAR) | (1L << UNICODE_ESCAPE) | (1L << QUOTED_STRING))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 214;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 215;
			Match(STRING_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberLiteralContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_LITERAL() { return GetToken(FluentParser.NUMBER_LITERAL, 0); }
		public NumberLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberLiteralContext numberLiteral() {
		NumberLiteralContext _localctx = new NumberLiteralContext(Context, State);
		EnterRule(_localctx, 44, RULE_numberLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			Match(NUMBER_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableReferenceContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_REF() { return GetToken(FluentParser.VARIABLE_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER_REF() { return GetToken(FluentParser.IDENTIFIER_REF, 0); }
		public VariableReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableReferenceContext variableReference() {
		VariableReferenceContext _localctx = new VariableReferenceContext(Context, State);
		EnterRule(_localctx, 46, RULE_variableReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			Match(VARIABLE_REF);
			State = 220;
			Match(IDENTIFIER_REF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermReferenceContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERM_REF() { return GetToken(FluentParser.TERM_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RecordReferenceContext recordReference() {
			return GetRuleContext<RecordReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public TermReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_termReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermReferenceContext termReference() {
		TermReferenceContext _localctx = new TermReferenceContext(Context, State);
		EnterRule(_localctx, 48, RULE_termReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			Match(TERM_REF);
			State = 223;
			recordReference();
			State = 225;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 224;
				argumentList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageReferenceContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public RecordReferenceContext recordReference() {
			return GetRuleContext<RecordReferenceContext>(0);
		}
		public MessageReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageReferenceContext messageReference() {
		MessageReferenceContext _localctx = new MessageReferenceContext(Context, State);
		EnterRule(_localctx, 50, RULE_messageReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			recordReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordReferenceContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER_REF() { return GetToken(FluentParser.IDENTIFIER_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeAccessorContext attributeAccessor() {
			return GetRuleContext<AttributeAccessorContext>(0);
		}
		public RecordReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordReferenceContext recordReference() {
		RecordReferenceContext _localctx = new RecordReferenceContext(Context, State);
		EnterRule(_localctx, 52, RULE_recordReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			Match(IDENTIFIER_REF);
			State = 231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ATTRIBUTE_REF) {
				{
				State = 230;
				attributeAccessor();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeAccessorContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE_REF() { return GetToken(FluentParser.ATTRIBUTE_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER_REF() { return GetToken(FluentParser.IDENTIFIER_REF, 0); }
		public AttributeAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeAccessor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeAccessor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeAccessorContext attributeAccessor() {
		AttributeAccessorContext _localctx = new AttributeAccessorContext(Context, State);
		EnterRule(_localctx, 54, RULE_attributeAccessor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			Match(ATTRIBUTE_REF);
			State = 234;
			Match(IDENTIFIER_REF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER_REF() { return GetToken(FluentParser.IDENTIFIER_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 56, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			Match(IDENTIFIER_REF);
			State = 237;
			argumentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL_OPEN() { return GetToken(FluentParser.CALL_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL_CLOSE() { return GetToken(FluentParser.CALL_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CALL_ARG_SEP() { return GetTokens(FluentParser.CALL_ARG_SEP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL_ARG_SEP(int i) {
			return GetToken(FluentParser.CALL_ARG_SEP, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 58, RULE_argumentList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			ws();
			State = 240;
			Match(CALL_OPEN);
			State = 247;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 241;
					argument();
					State = 242;
					ws();
					State = 243;
					Match(CALL_ARG_SEP);
					}
					} 
				}
				State = 249;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			State = 251;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 250;
				argument();
				}
				break;
			}
			State = 253;
			ws();
			State = 254;
			Match(CALL_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws() {
			return GetRuleContext<WsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamedArgumentContext namedArgument() {
			return GetRuleContext<NamedArgumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentExpressionContext argumentExpression() {
			return GetRuleContext<ArgumentExpressionContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 60, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			ws();
			State = 259;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 257;
				namedArgument();
				}
				break;
			case 2:
				{
				State = 258;
				argumentExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedArgumentContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER_REF() { return GetToken(FluentParser.IDENTIFIER_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL_ARG_NAME_SEP() { return GetToken(FluentParser.CALL_ARG_NAME_SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentExpressionContext argumentExpression() {
			return GetRuleContext<ArgumentExpressionContext>(0);
		}
		public NamedArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedArgumentContext namedArgument() {
		NamedArgumentContext _localctx = new NamedArgumentContext(Context, State);
		EnterRule(_localctx, 62, RULE_namedArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			Match(IDENTIFIER_REF);
			State = 262;
			ws();
			State = 263;
			Match(CALL_ARG_NAME_SEP);
			State = 264;
			ws();
			State = 265;
			argumentExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentExpressionContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public InlineExpressionContext inlineExpression() {
			return GetRuleContext<InlineExpressionContext>(0);
		}
		public ArgumentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentExpressionContext argumentExpression() {
		ArgumentExpressionContext _localctx = new ArgumentExpressionContext(Context, State);
		EnterRule(_localctx, 64, RULE_argumentExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			inlineExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyLineContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(FluentParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL_INDENT() { return GetToken(FluentParser.NL_INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(FluentParser.INDENT, 0); }
		public EmptyLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyLineContext emptyLine() {
		EmptyLineContext _localctx = new EmptyLineContext(Context, State);
		EnterRule(_localctx, 66, RULE_emptyLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDENT) {
				{
				State = 269;
				Match(INDENT);
				}
			}

			State = 272;
			_la = TokenStream.LA(1);
			if ( !(_la==NL || _la==NL_INDENT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ')', '\x115', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x3', '\x2', '\a', '\x2', 'H', '\n', '\x2', '\f', '\x2', 
		'\xE', '\x2', 'K', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'S', '\n', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 'X', '\n', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'^', '\n', '\x5', '\x3', '\x5', '\x5', '\x5', '\x61', '\n', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', '\x65', '\n', '\x6', '\x3', '\x6', 
		'\x5', '\x6', 'h', '\n', '\x6', '\x3', '\x6', '\x5', '\x6', 'k', '\n', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'o', '\n', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', 's', '\n', '\a', '\x3', '\b', '\x6', '\b', 
		'v', '\n', '\b', '\r', '\b', '\xE', '\b', 'w', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x6', 
		'\n', '\x81', '\n', '\n', '\r', '\n', '\xE', '\n', '\x82', '\x3', '\v', 
		'\x3', '\v', '\x5', '\v', '\x87', '\n', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\a', '\xE', '\x8F', 
		'\n', '\xE', '\f', '\xE', '\xE', '\xE', '\x92', '\v', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x9D', '\n', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', 
		'\x12', '\xA8', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\xAB', '\v', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\a', '\x12', '\xB2', '\n', '\x12', '\f', '\x12', '\xE', '\x12', 
		'\xB5', '\v', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x5', '\x14', '\xBC', '\n', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x5', '\x14', '\xC0', '\n', '\x14', '\x3', '\x14', '\x5', 
		'\x14', '\xC3', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', 
		'\xD1', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\a', '\x17', '\xD5', 
		'\n', '\x17', '\f', '\x17', '\xE', '\x17', '\xD8', '\v', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', 
		'\x1A', '\xE4', '\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', 
		'\x3', '\x1C', '\x5', '\x1C', '\xEA', '\n', '\x1C', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\a', '\x1F', '\xF8', '\n', '\x1F', '\f', '\x1F', '\xE', '\x1F', 
		'\xFB', '\v', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\xFE', '\n', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x5', ' ', '\x106', '\n', ' ', '\x3', '!', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', '#', 
		'\x5', '#', '\x111', '\n', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', 
		'\x90', '\x2', '$', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', 
		'<', '>', '@', '\x42', '\x44', '\x2', '\x6', '\x3', '\x2', '\x4', '\x5', 
		'\x3', '\x2', '\x3', '\x5', '\x4', '\x2', '\x1D', '\x1E', ' ', ' ', '\x3', 
		'\x2', '\x3', '\x4', '\x2', '\x115', '\x2', 'I', '\x3', '\x2', '\x2', 
		'\x2', '\x4', 'R', '\x3', '\x2', '\x2', '\x2', '\x6', 'T', '\x3', '\x2', 
		'\x2', '\x2', '\b', 'Y', '\x3', '\x2', '\x2', '\x2', '\n', '\x62', '\x3', 
		'\x2', '\x2', '\x2', '\f', 'l', '\x3', '\x2', '\x2', '\x2', '\xE', 'u', 
		'\x3', '\x2', '\x2', '\x2', '\x10', 'y', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\x80', '\x3', '\x2', '\x2', '\x2', '\x14', '\x86', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x88', '\x3', '\x2', '\x2', '\x2', '\x18', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x90', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x93', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x9C', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\x9E', '\x3', '\x2', '\x2', '\x2', '\"', '\xA9', '\x3', '\x2', 
		'\x2', '\x2', '$', '\xB6', '\x3', '\x2', '\x2', '\x2', '&', '\xB9', '\x3', 
		'\x2', '\x2', '\x2', '(', '\xC7', '\x3', '\x2', '\x2', '\x2', '*', '\xD0', 
		'\x3', '\x2', '\x2', '\x2', ',', '\xD2', '\x3', '\x2', '\x2', '\x2', '.', 
		'\xDB', '\x3', '\x2', '\x2', '\x2', '\x30', '\xDD', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\xE0', '\x3', '\x2', '\x2', '\x2', '\x34', '\xE5', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\xE7', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\xEB', '\x3', '\x2', '\x2', '\x2', ':', '\xEE', '\x3', '\x2', '\x2', 
		'\x2', '<', '\xF1', '\x3', '\x2', '\x2', '\x2', '>', '\x102', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x107', '\x3', '\x2', '\x2', '\x2', '\x42', '\x10D', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x110', '\x3', '\x2', '\x2', '\x2', 
		'\x46', 'H', '\x5', '\x4', '\x3', '\x2', 'G', '\x46', '\x3', '\x2', '\x2', 
		'\x2', 'H', 'K', '\x3', '\x2', '\x2', '\x2', 'I', 'G', '\x3', '\x2', '\x2', 
		'\x2', 'I', 'J', '\x3', '\x2', '\x2', '\x2', 'J', 'L', '\x3', '\x2', '\x2', 
		'\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\a', '\x2', '\x2', 
		'\x3', 'M', '\x3', '\x3', '\x2', '\x2', '\x2', 'N', 'S', '\x5', '\b', 
		'\x5', '\x2', 'O', 'S', '\x5', '\n', '\x6', '\x2', 'P', 'S', '\x5', '\x6', 
		'\x4', '\x2', 'Q', 'S', '\x5', '\x44', '#', '\x2', 'R', 'N', '\x3', '\x2', 
		'\x2', '\x2', 'R', 'O', '\x3', '\x2', '\x2', '\x2', 'R', 'P', '\x3', '\x2', 
		'\x2', '\x2', 'R', 'Q', '\x3', '\x2', '\x2', '\x2', 'S', '\x5', '\x3', 
		'\x2', '\x2', '\x2', 'T', 'U', '\a', '\x1B', '\x2', '\x2', 'U', 'W', '\a', 
		'\x1C', '\x2', '\x2', 'V', 'X', '\a', '\x3', '\x2', '\x2', 'W', 'V', '\x3', 
		'\x2', '\x2', '\x2', 'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', '\a', 
		'\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\a', '\x6', '\x2', '\x2', 'Z', 
		'[', '\x5', '\f', '\a', '\x2', '[', ']', '\x5', '\x12', '\n', '\x2', '\\', 
		'^', '\x5', '\xE', '\b', '\x2', ']', '\\', '\x3', '\x2', '\x2', '\x2', 
		']', '^', '\x3', '\x2', '\x2', '\x2', '^', '`', '\x3', '\x2', '\x2', '\x2', 
		'_', '\x61', '\a', '\x3', '\x2', '\x2', '`', '_', '\x3', '\x2', '\x2', 
		'\x2', '`', '\x61', '\x3', '\x2', '\x2', '\x2', '\x61', '\t', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x64', '\x5', '\f', '\a', '\x2', '\x63', '\x65', 
		'\x5', '\x12', '\n', '\x2', '\x64', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\x64', '\x65', '\x3', '\x2', '\x2', '\x2', '\x65', 'g', '\x3', '\x2', 
		'\x2', '\x2', '\x66', 'h', '\x5', '\xE', '\b', '\x2', 'g', '\x66', '\x3', 
		'\x2', '\x2', '\x2', 'g', 'h', '\x3', '\x2', '\x2', '\x2', 'h', 'j', '\x3', 
		'\x2', '\x2', '\x2', 'i', 'k', '\a', '\x3', '\x2', '\x2', 'j', 'i', '\x3', 
		'\x2', '\x2', '\x2', 'j', 'k', '\x3', '\x2', '\x2', '\x2', 'k', '\v', 
		'\x3', '\x2', '\x2', '\x2', 'l', 'n', '\a', '\a', '\x2', '\x2', 'm', 'o', 
		'\a', '\x5', '\x2', '\x2', 'n', 'm', '\x3', '\x2', '\x2', '\x2', 'n', 
		'o', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\x3', '\x2', '\x2', '\x2', 
		'p', 'r', '\a', '\t', '\x2', '\x2', 'q', 's', '\a', '\x5', '\x2', '\x2', 
		'r', 'q', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\x3', '\x2', '\x2', '\x2', 
		's', '\r', '\x3', '\x2', '\x2', '\x2', 't', 'v', '\x5', '\x10', '\t', 
		'\x2', 'u', 't', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\x3', '\x2', '\x2', 
		'\x2', 'w', 'u', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\x3', '\x2', '\x2', 
		'\x2', 'x', '\xF', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\x5', '\x1A', 
		'\xE', '\x2', 'z', '{', '\x5', '\x18', '\r', '\x2', '{', '|', '\a', '\v', 
		'\x2', '\x2', '|', '}', '\x5', '\f', '\a', '\x2', '}', '~', '\x5', '\x12', 
		'\n', '\x2', '~', '\x11', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x81', 
		'\x5', '\x14', '\v', '\x2', '\x80', '\x7F', '\x3', '\x2', '\x2', '\x2', 
		'\x81', '\x82', '\x3', '\x2', '\x2', '\x2', '\x82', '\x80', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x83', '\x3', '\x2', '\x2', '\x2', '\x83', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x87', '\x5', '\x16', '\f', '\x2', 
		'\x85', '\x87', '\x5', '\x1C', '\xF', '\x2', '\x86', '\x84', '\x3', '\x2', 
		'\x2', '\x2', '\x86', '\x85', '\x3', '\x2', '\x2', '\x2', '\x87', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\x5', '\x1A', '\xE', '\x2', 
		'\x89', '\x8A', '\a', '\n', '\x2', '\x2', '\x8A', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x8B', '\x8C', '\t', '\x2', '\x2', '\x2', '\x8C', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x8D', '\x8F', '\t', '\x3', '\x2', '\x2', 
		'\x8E', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x92', '\x3', '\x2', 
		'\x2', '\x2', '\x90', '\x91', '\x3', '\x2', '\x2', '\x2', '\x90', '\x8E', 
		'\x3', '\x2', '\x2', '\x2', '\x91', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x92', '\x90', '\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\x5', '\x1A', 
		'\xE', '\x2', '\x94', '\x95', '\a', '\f', '\x2', '\x2', '\x95', '\x96', 
		'\x5', '\x1A', '\xE', '\x2', '\x96', '\x97', '\x5', '\x1E', '\x10', '\x2', 
		'\x97', '\x98', '\x5', '\x1A', '\xE', '\x2', '\x98', '\x99', '\a', '\r', 
		'\x2', '\x2', '\x99', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9D', 
		'\x5', ' ', '\x11', '\x2', '\x9B', '\x9D', '\x5', '*', '\x16', '\x2', 
		'\x9C', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9B', '\x3', '\x2', 
		'\x2', '\x2', '\x9D', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', 
		'\x5', '*', '\x16', '\x2', '\x9F', '\xA0', '\x5', '\x1A', '\xE', '\x2', 
		'\xA0', '\xA1', '\a', '\x13', '\x2', '\x2', '\xA1', '\xA2', '\x5', '\x1A', 
		'\xE', '\x2', '\xA2', '\xA3', '\x5', '\"', '\x12', '\x2', '\xA3', '!', 
		'\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\x5', '\x1A', '\xE', '\x2', 
		'\xA5', '\xA6', '\x5', '&', '\x14', '\x2', '\xA6', '\xA8', '\x3', '\x2', 
		'\x2', '\x2', '\xA7', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xAB', 
		'\x3', '\x2', '\x2', '\x2', '\xA9', '\xA7', '\x3', '\x2', '\x2', '\x2', 
		'\xA9', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAC', '\x3', '\x2', 
		'\x2', '\x2', '\xAB', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', 
		'\x5', '\x1A', '\xE', '\x2', '\xAD', '\xB3', '\x5', '$', '\x13', '\x2', 
		'\xAE', '\xAF', '\x5', '\x1A', '\xE', '\x2', '\xAF', '\xB0', '\x5', '&', 
		'\x14', '\x2', '\xB0', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xAE', 
		'\x3', '\x2', '\x2', '\x2', '\xB2', '\xB5', '\x3', '\x2', '\x2', '\x2', 
		'\xB3', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\x3', '\x2', 
		'\x2', '\x2', '\xB4', '#', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\a', '\x18', '\x2', '\x2', 
		'\xB7', '\xB8', '\x5', '&', '\x14', '\x2', '\xB8', '%', '\x3', '\x2', 
		'\x2', '\x2', '\xB9', '\xBB', '\a', '\x19', '\x2', '\x2', '\xBA', '\xBC', 
		'\a', '\x5', '\x2', '\x2', '\xBB', '\xBA', '\x3', '\x2', '\x2', '\x2', 
		'\xBB', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBF', '\x3', '\x2', 
		'\x2', '\x2', '\xBD', '\xC0', '\x5', '(', '\x15', '\x2', '\xBE', '\xC0', 
		'\a', '\xF', '\x2', '\x2', '\xBF', '\xBD', '\x3', '\x2', '\x2', '\x2', 
		'\xBF', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC2', '\x3', '\x2', 
		'\x2', '\x2', '\xC1', '\xC3', '\a', '\x5', '\x2', '\x2', '\xC2', '\xC1', 
		'\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', '\x3', '\x2', '\x2', '\x2', 
		'\xC3', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', '\a', '\x1A', 
		'\x2', '\x2', '\xC5', '\xC6', '\x5', '\x12', '\n', '\x2', '\xC6', '\'', 
		'\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\a', '\b', '\x2', '\x2', 
		'\xC8', ')', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xD1', '\x5', ',', '\x17', 
		'\x2', '\xCA', '\xD1', '\x5', '.', '\x18', '\x2', '\xCB', '\xD1', '\x5', 
		':', '\x1E', '\x2', '\xCC', '\xD1', '\x5', '\x30', '\x19', '\x2', '\xCD', 
		'\xD1', '\x5', '\x32', '\x1A', '\x2', '\xCE', '\xD1', '\x5', '\x34', '\x1B', 
		'\x2', '\xCF', '\xD1', '\x5', '\x1C', '\xF', '\x2', '\xD0', '\xC9', '\x3', 
		'\x2', '\x2', '\x2', '\xD0', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xD0', 
		'\xCB', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xCC', '\x3', '\x2', '\x2', 
		'\x2', '\xD0', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xCE', '\x3', 
		'\x2', '\x2', '\x2', '\xD0', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'+', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD6', '\a', '\xE', '\x2', '\x2', 
		'\xD3', '\xD5', '\t', '\x4', '\x2', '\x2', '\xD4', '\xD3', '\x3', '\x2', 
		'\x2', '\x2', '\xD5', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD4', 
		'\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', '\x3', '\x2', '\x2', '\x2', 
		'\xD7', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD6', '\x3', '\x2', 
		'\x2', '\x2', '\xD9', '\xDA', '\a', '\x1F', '\x2', '\x2', '\xDA', '-', 
		'\x3', '\x2', '\x2', '\x2', '\xDB', '\xDC', '\a', '\xF', '\x2', '\x2', 
		'\xDC', '/', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', '\a', '\x10', 
		'\x2', '\x2', '\xDE', '\xDF', '\a', '\b', '\x2', '\x2', '\xDF', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', '\a', '\x11', '\x2', '\x2', 
		'\xE1', '\xE3', '\x5', '\x36', '\x1C', '\x2', '\xE2', '\xE4', '\x5', '<', 
		'\x1F', '\x2', '\xE3', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', 
		'\x3', '\x2', '\x2', '\x2', '\xE4', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\xE5', '\xE6', '\x5', '\x36', '\x1C', '\x2', '\xE6', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\xE7', '\xE9', '\a', '\b', '\x2', '\x2', '\xE8', '\xEA', 
		'\x5', '\x38', '\x1D', '\x2', '\xE9', '\xE8', '\x3', '\x2', '\x2', '\x2', 
		'\xE9', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEA', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\xEB', '\xEC', '\a', '\x12', '\x2', '\x2', '\xEC', '\xED', 
		'\a', '\b', '\x2', '\x2', '\xED', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\xEE', '\xEF', '\a', '\b', '\x2', '\x2', '\xEF', '\xF0', '\x5', '<', 
		'\x1F', '\x2', '\xF0', ';', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF2', 
		'\x5', '\x1A', '\xE', '\x2', '\xF2', '\xF9', '\a', '\x14', '\x2', '\x2', 
		'\xF3', '\xF4', '\x5', '>', ' ', '\x2', '\xF4', '\xF5', '\x5', '\x1A', 
		'\xE', '\x2', '\xF5', '\xF6', '\a', '\x16', '\x2', '\x2', '\xF6', '\xF8', 
		'\x3', '\x2', '\x2', '\x2', '\xF7', '\xF3', '\x3', '\x2', '\x2', '\x2', 
		'\xF8', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xF7', '\x3', '\x2', 
		'\x2', '\x2', '\xF9', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFD', 
		'\x3', '\x2', '\x2', '\x2', '\xFB', '\xF9', '\x3', '\x2', '\x2', '\x2', 
		'\xFC', '\xFE', '\x5', '>', ' ', '\x2', '\xFD', '\xFC', '\x3', '\x2', 
		'\x2', '\x2', '\xFD', '\xFE', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', 
		'\x3', '\x2', '\x2', '\x2', '\xFF', '\x100', '\x5', '\x1A', '\xE', '\x2', 
		'\x100', '\x101', '\a', '\x15', '\x2', '\x2', '\x101', '=', '\x3', '\x2', 
		'\x2', '\x2', '\x102', '\x105', '\x5', '\x1A', '\xE', '\x2', '\x103', 
		'\x106', '\x5', '@', '!', '\x2', '\x104', '\x106', '\x5', '\x42', '\"', 
		'\x2', '\x105', '\x103', '\x3', '\x2', '\x2', '\x2', '\x105', '\x104', 
		'\x3', '\x2', '\x2', '\x2', '\x106', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x107', '\x108', '\a', '\b', '\x2', '\x2', '\x108', '\x109', '\x5', '\x1A', 
		'\xE', '\x2', '\x109', '\x10A', '\a', '\x17', '\x2', '\x2', '\x10A', '\x10B', 
		'\x5', '\x1A', '\xE', '\x2', '\x10B', '\x10C', '\x5', '\x42', '\"', '\x2', 
		'\x10C', '\x41', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', '\x5', 
		'*', '\x16', '\x2', '\x10E', '\x43', '\x3', '\x2', '\x2', '\x2', '\x10F', 
		'\x111', '\a', '\x5', '\x2', '\x2', '\x110', '\x10F', '\x3', '\x2', '\x2', 
		'\x2', '\x110', '\x111', '\x3', '\x2', '\x2', '\x2', '\x111', '\x112', 
		'\x3', '\x2', '\x2', '\x2', '\x112', '\x113', '\t', '\x5', '\x2', '\x2', 
		'\x113', '\x45', '\x3', '\x2', '\x2', '\x2', '\x1E', 'I', 'R', 'W', ']', 
		'`', '\x64', 'g', 'j', 'n', 'r', 'w', '\x82', '\x86', '\x90', '\x9C', 
		'\xA9', '\xB3', '\xBB', '\xBF', '\xC2', '\xD0', '\xD6', '\xE3', '\xE9', 
		'\xF9', '\xFD', '\x105', '\x110',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace FluentTranslate.Parser
