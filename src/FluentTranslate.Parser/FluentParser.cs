//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:\projects\FluentTranslate\src\FluentTranslate.Parser\FluentParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class FluentParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NL=1, NL_INDENT=2, INDENT=3, TERM=4, IDENTIFIER=5, IDENTIFIER_REF=6, EQUALS=7, 
		TEXT=8, ATTRIBUTE=9, PLACEABLE_OPEN=10, PLACEABLE_CLOSE=11, STRING_OPEN=12, 
		NUMBER_LITERAL=13, VARIABLE_REF=14, TERM_REF=15, ATTRIBUTE_REF=16, SELECTOR=17, 
		CALL_OPEN=18, CALL_CLOSE=19, CALL_ARG_SEP=20, CALL_ARG_NAME_SEP=21, VARIANT_DEFAULT=22, 
		VARIANT_OPEN=23, VARIANT_CLOSE=24, COMMENT_OPEN=25, COMMENT=26, ESCAPED_CHAR=27, 
		UNICODE_ESCAPE=28, STRING_CLOSE=29, QUOTED_STRING=30, ML_VARIANT_DEFAULT=31, 
		ML_VARIANT_OPEN=32, PL_VARIABLE_REF=33, PL_TERM_REF=34, PL_ATTRIBUTE_REF=35, 
		CL_PLACEABLE_CLOSE=36, CL_CLOSE=37, CL_ARG_SEP=38, CL_ARG_NAME_SEP=39;
	public const int
		RULE_resource = 0, RULE_entry = 1, RULE_comment = 2, RULE_term = 3, RULE_message = 4, 
		RULE_record = 5, RULE_attributeList = 6, RULE_attribute = 7, RULE_expressionList = 8, 
		RULE_expression = 9, RULE_text = 10, RULE_indent = 11, RULE_ws = 12, RULE_placeable = 13, 
		RULE_placeableExpression = 14, RULE_selectExpression = 15, RULE_variantList = 16, 
		RULE_defaultVariant = 17, RULE_variant = 18, RULE_inlineExpression = 19, 
		RULE_stringLiteral = 20, RULE_numberLiteral = 21, RULE_variableReference = 22, 
		RULE_termReference = 23, RULE_messageReference = 24, RULE_recordReference = 25, 
		RULE_attributeAccessor = 26, RULE_functionCall = 27, RULE_argumentList = 28, 
		RULE_argument = 29, RULE_namedArgument = 30, RULE_argumentExpression = 31, 
		RULE_emptyLine = 32;
	public static readonly string[] ruleNames = {
		"resource", "entry", "comment", "term", "message", "record", "attributeList", 
		"attribute", "expressionList", "expression", "text", "indent", "ws", "placeable", 
		"placeableExpression", "selectExpression", "variantList", "defaultVariant", 
		"variant", "inlineExpression", "stringLiteral", "numberLiteral", "variableReference", 
		"termReference", "messageReference", "recordReference", "attributeAccessor", 
		"functionCall", "argumentList", "argument", "namedArgument", "argumentExpression", 
		"emptyLine"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "'\"'", null, null, null, null, null, null, 
		null, "')'", "','", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NL", "NL_INDENT", "INDENT", "TERM", "IDENTIFIER", "IDENTIFIER_REF", 
		"EQUALS", "TEXT", "ATTRIBUTE", "PLACEABLE_OPEN", "PLACEABLE_CLOSE", "STRING_OPEN", 
		"NUMBER_LITERAL", "VARIABLE_REF", "TERM_REF", "ATTRIBUTE_REF", "SELECTOR", 
		"CALL_OPEN", "CALL_CLOSE", "CALL_ARG_SEP", "CALL_ARG_NAME_SEP", "VARIANT_DEFAULT", 
		"VARIANT_OPEN", "VARIANT_CLOSE", "COMMENT_OPEN", "COMMENT", "ESCAPED_CHAR", 
		"UNICODE_ESCAPE", "STRING_CLOSE", "QUOTED_STRING", "ML_VARIANT_DEFAULT", 
		"ML_VARIANT_OPEN", "PL_VARIABLE_REF", "PL_TERM_REF", "PL_ATTRIBUTE_REF", 
		"CL_PLACEABLE_CLOSE", "CL_CLOSE", "CL_ARG_SEP", "CL_ARG_NAME_SEP"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FluentParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static FluentParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FluentParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FluentParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ResourceContext : FluentTranslate.Parser.FluentContext {
		public ITerminalNode Eof() { return GetToken(FluentParser.Eof, 0); }
		public EntryContext[] entry() {
			return GetRuleContexts<EntryContext>();
		}
		public EntryContext entry(int i) {
			return GetRuleContext<EntryContext>(i);
		}
		public ResourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.EnterResource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.ExitResource(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceContext resource() {
		ResourceContext _localctx = new ResourceContext(Context, State);
		EnterRule(_localctx, 0, RULE_resource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 66; entry();
				}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NL) | (1L << NL_INDENT) | (1L << INDENT) | (1L << TERM) | (1L << IDENTIFIER) | (1L << COMMENT_OPEN))) != 0) );
			State = 71; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntryContext : FluentTranslate.Parser.FluentContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public MessageContext message() {
			return GetRuleContext<MessageContext>(0);
		}
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public EmptyLineContext emptyLine() {
			return GetRuleContext<EmptyLineContext>(0);
		}
		public EntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entry; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.EnterEntry(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.ExitEntry(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntryContext entry() {
		EntryContext _localctx = new EntryContext(Context, State);
		EnterRule(_localctx, 2, RULE_entry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TERM:
				{
				State = 73; term();
				}
				break;
			case IDENTIFIER:
				{
				State = 74; message();
				}
				break;
			case COMMENT_OPEN:
				{
				State = 75; comment();
				}
				break;
			case NL:
			case NL_INDENT:
			case INDENT:
				{
				State = 76; emptyLine();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : FluentTranslate.Parser.FluentContext {
		public ITerminalNode COMMENT_OPEN() { return GetToken(FluentParser.COMMENT_OPEN, 0); }
		public ITerminalNode COMMENT() { return GetToken(FluentParser.COMMENT, 0); }
		public ITerminalNode NL() { return GetToken(FluentParser.NL, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 4, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79; Match(COMMENT_OPEN);
			State = 80; Match(COMMENT);
			State = 82;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 81; Match(NL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : FluentTranslate.Parser.FluentContext {
		public ITerminalNode TERM() { return GetToken(FluentParser.TERM, 0); }
		public RecordContext record() {
			return GetRuleContext<RecordContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public AttributeListContext attributeList() {
			return GetRuleContext<AttributeListContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 6, RULE_term);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; Match(TERM);
			State = 85; record();
			State = 86; expressionList();
			State = 88;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 87; attributeList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageContext : FluentTranslate.Parser.FluentContext {
		public RecordContext record() {
			return GetRuleContext<RecordContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public AttributeListContext attributeList() {
			return GetRuleContext<AttributeListContext>(0);
		}
		public MessageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_message; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.EnterMessage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.ExitMessage(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageContext message() {
		MessageContext _localctx = new MessageContext(Context, State);
		EnterRule(_localctx, 8, RULE_message);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90; record();
			State = 92;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 91; expressionList();
				}
				break;
			}
			State = 95;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 94; attributeList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordContext : FluentTranslate.Parser.FluentContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FluentParser.IDENTIFIER, 0); }
		public ITerminalNode EQUALS() { return GetToken(FluentParser.EQUALS, 0); }
		public ITerminalNode[] INDENT() { return GetTokens(FluentParser.INDENT); }
		public ITerminalNode INDENT(int i) {
			return GetToken(FluentParser.INDENT, i);
		}
		public RecordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_record; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.EnterRecord(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.ExitRecord(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordContext record() {
		RecordContext _localctx = new RecordContext(Context, State);
		EnterRule(_localctx, 10, RULE_record);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97; Match(IDENTIFIER);
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDENT) {
				{
				State = 98; Match(INDENT);
				}
			}

			State = 101; Match(EQUALS);
			State = 103;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 102; Match(INDENT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeListContext : FluentTranslate.Parser.FluentContext {
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public AttributeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.EnterAttributeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.ExitAttributeList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeListContext attributeList() {
		AttributeListContext _localctx = new AttributeListContext(Context, State);
		EnterRule(_localctx, 12, RULE_attributeList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 105; attribute();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 108;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : FluentTranslate.Parser.FluentContext {
		public WsContext ws() {
			return GetRuleContext<WsContext>(0);
		}
		public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		public ITerminalNode ATTRIBUTE() { return GetToken(FluentParser.ATTRIBUTE, 0); }
		public RecordContext record() {
			return GetRuleContext<RecordContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 14, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; ws();
			State = 111; indent();
			State = 112; Match(ATTRIBUTE);
			State = 113; record();
			State = 114; expressionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : FluentTranslate.Parser.FluentContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 16, RULE_expressionList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 116; expression();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 119;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : FluentTranslate.Parser.FluentContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public PlaceableContext placeable() {
			return GetRuleContext<PlaceableContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_expression);
		try {
			State = 123;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 121; text();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 122; placeable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : FluentTranslate.Parser.FluentContext {
		public WsContext ws() {
			return GetRuleContext<WsContext>(0);
		}
		public ITerminalNode TEXT() { return GetToken(FluentParser.TEXT, 0); }
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.EnterText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.ExitText(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 20, RULE_text);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125; ws();
			State = 126; Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndentContext : FluentTranslate.Parser.FluentContext {
		public ITerminalNode INDENT() { return GetToken(FluentParser.INDENT, 0); }
		public ITerminalNode NL_INDENT() { return GetToken(FluentParser.NL_INDENT, 0); }
		public IndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.EnterIndent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.ExitIndent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndentContext indent() {
		IndentContext _localctx = new IndentContext(Context, State);
		EnterRule(_localctx, 22, RULE_indent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			_la = TokenStream.LA(1);
			if ( !(_la==NL_INDENT || _la==INDENT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WsContext : FluentTranslate.Parser.FluentContext {
		public ITerminalNode[] INDENT() { return GetTokens(FluentParser.INDENT); }
		public ITerminalNode INDENT(int i) {
			return GetToken(FluentParser.INDENT, i);
		}
		public ITerminalNode[] NL() { return GetTokens(FluentParser.NL); }
		public ITerminalNode NL(int i) {
			return GetToken(FluentParser.NL, i);
		}
		public ITerminalNode[] NL_INDENT() { return GetTokens(FluentParser.NL_INDENT); }
		public ITerminalNode NL_INDENT(int i) {
			return GetToken(FluentParser.NL_INDENT, i);
		}
		public WsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ws; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.EnterWs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.ExitWs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WsContext ws() {
		WsContext _localctx = new WsContext(Context, State);
		EnterRule(_localctx, 24, RULE_ws);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 130;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NL) | (1L << NL_INDENT) | (1L << INDENT))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 135;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlaceableContext : FluentTranslate.Parser.FluentContext {
		public WsContext Prefix;
		public ITerminalNode PLACEABLE_OPEN() { return GetToken(FluentParser.PLACEABLE_OPEN, 0); }
		public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		public PlaceableExpressionContext placeableExpression() {
			return GetRuleContext<PlaceableExpressionContext>(0);
		}
		public ITerminalNode PLACEABLE_CLOSE() { return GetToken(FluentParser.PLACEABLE_CLOSE, 0); }
		public PlaceableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_placeable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.EnterPlaceable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.ExitPlaceable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlaceable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlaceableContext placeable() {
		PlaceableContext _localctx = new PlaceableContext(Context, State);
		EnterRule(_localctx, 26, RULE_placeable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136; _localctx.Prefix = ws();
			State = 137; Match(PLACEABLE_OPEN);
			State = 138; ws();
			State = 139; placeableExpression();
			State = 140; ws();
			State = 141; Match(PLACEABLE_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlaceableExpressionContext : FluentTranslate.Parser.FluentContext {
		public SelectExpressionContext selectExpression() {
			return GetRuleContext<SelectExpressionContext>(0);
		}
		public InlineExpressionContext inlineExpression() {
			return GetRuleContext<InlineExpressionContext>(0);
		}
		public PlaceableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_placeableExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.EnterPlaceableExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.ExitPlaceableExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlaceableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlaceableExpressionContext placeableExpression() {
		PlaceableExpressionContext _localctx = new PlaceableExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_placeableExpression);
		try {
			State = 145;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 143; selectExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 144; inlineExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectExpressionContext : FluentTranslate.Parser.FluentContext {
		public InlineExpressionContext inlineExpression() {
			return GetRuleContext<InlineExpressionContext>(0);
		}
		public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		public ITerminalNode SELECTOR() { return GetToken(FluentParser.SELECTOR, 0); }
		public VariantListContext variantList() {
			return GetRuleContext<VariantListContext>(0);
		}
		public SelectExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.EnterSelectExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.ExitSelectExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectExpressionContext selectExpression() {
		SelectExpressionContext _localctx = new SelectExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_selectExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147; inlineExpression();
			State = 148; ws();
			State = 149; Match(SELECTOR);
			State = 150; ws();
			State = 151; variantList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariantListContext : FluentTranslate.Parser.FluentContext {
		public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		public DefaultVariantContext defaultVariant() {
			return GetRuleContext<DefaultVariantContext>(0);
		}
		public VariantContext[] variant() {
			return GetRuleContexts<VariantContext>();
		}
		public VariantContext variant(int i) {
			return GetRuleContext<VariantContext>(i);
		}
		public VariantListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variantList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.EnterVariantList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.ExitVariantList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariantList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariantListContext variantList() {
		VariantListContext _localctx = new VariantListContext(Context, State);
		EnterRule(_localctx, 32, RULE_variantList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 153; ws();
					State = 154; variant();
					}
					} 
				}
				State = 160;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			State = 161; ws();
			State = 162; defaultVariant();
			State = 168;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 163; ws();
					State = 164; variant();
					}
					} 
				}
				State = 170;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultVariantContext : FluentTranslate.Parser.FluentContext {
		public ITerminalNode VARIANT_DEFAULT() { return GetToken(FluentParser.VARIANT_DEFAULT, 0); }
		public VariantContext variant() {
			return GetRuleContext<VariantContext>(0);
		}
		public DefaultVariantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultVariant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.EnterDefaultVariant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.ExitDefaultVariant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultVariant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultVariantContext defaultVariant() {
		DefaultVariantContext _localctx = new DefaultVariantContext(Context, State);
		EnterRule(_localctx, 34, RULE_defaultVariant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171; Match(VARIANT_DEFAULT);
			State = 172; variant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariantContext : FluentTranslate.Parser.FluentContext {
		public ITerminalNode VARIANT_OPEN() { return GetToken(FluentParser.VARIANT_OPEN, 0); }
		public ITerminalNode VARIANT_CLOSE() { return GetToken(FluentParser.VARIANT_CLOSE, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ITerminalNode IDENTIFIER_REF() { return GetToken(FluentParser.IDENTIFIER_REF, 0); }
		public ITerminalNode NUMBER_LITERAL() { return GetToken(FluentParser.NUMBER_LITERAL, 0); }
		public ITerminalNode[] INDENT() { return GetTokens(FluentParser.INDENT); }
		public ITerminalNode INDENT(int i) {
			return GetToken(FluentParser.INDENT, i);
		}
		public VariantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.EnterVariant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.ExitVariant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariantContext variant() {
		VariantContext _localctx = new VariantContext(Context, State);
		EnterRule(_localctx, 36, RULE_variant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174; Match(VARIANT_OPEN);
			State = 176;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDENT) {
				{
				State = 175; Match(INDENT);
				}
			}

			State = 178;
			_la = TokenStream.LA(1);
			if ( !(_la==IDENTIFIER_REF || _la==NUMBER_LITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDENT) {
				{
				State = 179; Match(INDENT);
				}
			}

			State = 182; Match(VARIANT_CLOSE);
			State = 183; expressionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineExpressionContext : FluentTranslate.Parser.FluentContext {
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public VariableReferenceContext variableReference() {
			return GetRuleContext<VariableReferenceContext>(0);
		}
		public TermReferenceContext termReference() {
			return GetRuleContext<TermReferenceContext>(0);
		}
		public MessageReferenceContext messageReference() {
			return GetRuleContext<MessageReferenceContext>(0);
		}
		public PlaceableContext placeable() {
			return GetRuleContext<PlaceableContext>(0);
		}
		public InlineExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.EnterInlineExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.ExitInlineExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineExpressionContext inlineExpression() {
		InlineExpressionContext _localctx = new InlineExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_inlineExpression);
		try {
			State = 192;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 185; stringLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 186; numberLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 187; functionCall();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 188; variableReference();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 189; termReference();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 190; messageReference();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 191; placeable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : FluentTranslate.Parser.FluentContext {
		public ITerminalNode STRING_OPEN() { return GetToken(FluentParser.STRING_OPEN, 0); }
		public ITerminalNode STRING_CLOSE() { return GetToken(FluentParser.STRING_CLOSE, 0); }
		public ITerminalNode[] ESCAPED_CHAR() { return GetTokens(FluentParser.ESCAPED_CHAR); }
		public ITerminalNode ESCAPED_CHAR(int i) {
			return GetToken(FluentParser.ESCAPED_CHAR, i);
		}
		public ITerminalNode[] UNICODE_ESCAPE() { return GetTokens(FluentParser.UNICODE_ESCAPE); }
		public ITerminalNode UNICODE_ESCAPE(int i) {
			return GetToken(FluentParser.UNICODE_ESCAPE, i);
		}
		public ITerminalNode[] QUOTED_STRING() { return GetTokens(FluentParser.QUOTED_STRING); }
		public ITerminalNode QUOTED_STRING(int i) {
			return GetToken(FluentParser.QUOTED_STRING, i);
		}
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 40, RULE_stringLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194; Match(STRING_OPEN);
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ESCAPED_CHAR) | (1L << UNICODE_ESCAPE) | (1L << QUOTED_STRING))) != 0)) {
				{
				{
				State = 195;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ESCAPED_CHAR) | (1L << UNICODE_ESCAPE) | (1L << QUOTED_STRING))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 201; Match(STRING_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberLiteralContext : FluentTranslate.Parser.FluentContext {
		public ITerminalNode NUMBER_LITERAL() { return GetToken(FluentParser.NUMBER_LITERAL, 0); }
		public NumberLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.EnterNumberLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.ExitNumberLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberLiteralContext numberLiteral() {
		NumberLiteralContext _localctx = new NumberLiteralContext(Context, State);
		EnterRule(_localctx, 42, RULE_numberLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203; Match(NUMBER_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableReferenceContext : FluentTranslate.Parser.FluentContext {
		public ITerminalNode VARIABLE_REF() { return GetToken(FluentParser.VARIABLE_REF, 0); }
		public ITerminalNode IDENTIFIER_REF() { return GetToken(FluentParser.IDENTIFIER_REF, 0); }
		public VariableReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.EnterVariableReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.ExitVariableReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableReferenceContext variableReference() {
		VariableReferenceContext _localctx = new VariableReferenceContext(Context, State);
		EnterRule(_localctx, 44, RULE_variableReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205; Match(VARIABLE_REF);
			State = 206; Match(IDENTIFIER_REF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermReferenceContext : FluentTranslate.Parser.FluentContext {
		public ITerminalNode TERM_REF() { return GetToken(FluentParser.TERM_REF, 0); }
		public RecordReferenceContext recordReference() {
			return GetRuleContext<RecordReferenceContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public TermReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_termReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.EnterTermReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.ExitTermReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermReferenceContext termReference() {
		TermReferenceContext _localctx = new TermReferenceContext(Context, State);
		EnterRule(_localctx, 46, RULE_termReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208; Match(TERM_REF);
			State = 209; recordReference();
			State = 211;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 210; argumentList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageReferenceContext : FluentTranslate.Parser.FluentContext {
		public RecordReferenceContext recordReference() {
			return GetRuleContext<RecordReferenceContext>(0);
		}
		public MessageReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.EnterMessageReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.ExitMessageReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageReferenceContext messageReference() {
		MessageReferenceContext _localctx = new MessageReferenceContext(Context, State);
		EnterRule(_localctx, 48, RULE_messageReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213; recordReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordReferenceContext : FluentTranslate.Parser.FluentContext {
		public ITerminalNode IDENTIFIER_REF() { return GetToken(FluentParser.IDENTIFIER_REF, 0); }
		public AttributeAccessorContext attributeAccessor() {
			return GetRuleContext<AttributeAccessorContext>(0);
		}
		public RecordReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.EnterRecordReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.ExitRecordReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordReferenceContext recordReference() {
		RecordReferenceContext _localctx = new RecordReferenceContext(Context, State);
		EnterRule(_localctx, 50, RULE_recordReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215; Match(IDENTIFIER_REF);
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ATTRIBUTE_REF) {
				{
				State = 216; attributeAccessor();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeAccessorContext : FluentTranslate.Parser.FluentContext {
		public ITerminalNode ATTRIBUTE_REF() { return GetToken(FluentParser.ATTRIBUTE_REF, 0); }
		public ITerminalNode IDENTIFIER_REF() { return GetToken(FluentParser.IDENTIFIER_REF, 0); }
		public AttributeAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeAccessor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.EnterAttributeAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.ExitAttributeAccessor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeAccessor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeAccessorContext attributeAccessor() {
		AttributeAccessorContext _localctx = new AttributeAccessorContext(Context, State);
		EnterRule(_localctx, 52, RULE_attributeAccessor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219; Match(ATTRIBUTE_REF);
			State = 220; Match(IDENTIFIER_REF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : FluentTranslate.Parser.FluentContext {
		public ITerminalNode IDENTIFIER_REF() { return GetToken(FluentParser.IDENTIFIER_REF, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 54, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222; Match(IDENTIFIER_REF);
			State = 223; argumentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : FluentTranslate.Parser.FluentContext {
		public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		public ITerminalNode CALL_OPEN() { return GetToken(FluentParser.CALL_OPEN, 0); }
		public ITerminalNode CALL_CLOSE() { return GetToken(FluentParser.CALL_CLOSE, 0); }
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ITerminalNode[] CALL_ARG_SEP() { return GetTokens(FluentParser.CALL_ARG_SEP); }
		public ITerminalNode CALL_ARG_SEP(int i) {
			return GetToken(FluentParser.CALL_ARG_SEP, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 56, RULE_argumentList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 225; ws();
			State = 226; Match(CALL_OPEN);
			State = 233;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 227; argument();
					State = 228; ws();
					State = 229; Match(CALL_ARG_SEP);
					}
					} 
				}
				State = 235;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			State = 237;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 236; argument();
				}
				break;
			}
			State = 239; ws();
			State = 240; Match(CALL_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : FluentTranslate.Parser.FluentContext {
		public WsContext ws() {
			return GetRuleContext<WsContext>(0);
		}
		public NamedArgumentContext namedArgument() {
			return GetRuleContext<NamedArgumentContext>(0);
		}
		public ArgumentExpressionContext argumentExpression() {
			return GetRuleContext<ArgumentExpressionContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 58, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242; ws();
			State = 245;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 243; namedArgument();
				}
				break;
			case 2:
				{
				State = 244; argumentExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedArgumentContext : FluentTranslate.Parser.FluentContext {
		public ITerminalNode IDENTIFIER_REF() { return GetToken(FluentParser.IDENTIFIER_REF, 0); }
		public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		public ITerminalNode CALL_ARG_NAME_SEP() { return GetToken(FluentParser.CALL_ARG_NAME_SEP, 0); }
		public ArgumentExpressionContext argumentExpression() {
			return GetRuleContext<ArgumentExpressionContext>(0);
		}
		public NamedArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.EnterNamedArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.ExitNamedArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedArgumentContext namedArgument() {
		NamedArgumentContext _localctx = new NamedArgumentContext(Context, State);
		EnterRule(_localctx, 60, RULE_namedArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247; Match(IDENTIFIER_REF);
			State = 248; ws();
			State = 249; Match(CALL_ARG_NAME_SEP);
			State = 250; ws();
			State = 251; argumentExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentExpressionContext : FluentTranslate.Parser.FluentContext {
		public InlineExpressionContext inlineExpression() {
			return GetRuleContext<InlineExpressionContext>(0);
		}
		public ArgumentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.EnterArgumentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.ExitArgumentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentExpressionContext argumentExpression() {
		ArgumentExpressionContext _localctx = new ArgumentExpressionContext(Context, State);
		EnterRule(_localctx, 62, RULE_argumentExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253; inlineExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyLineContext : FluentTranslate.Parser.FluentContext {
		public ITerminalNode NL() { return GetToken(FluentParser.NL, 0); }
		public ITerminalNode NL_INDENT() { return GetToken(FluentParser.NL_INDENT, 0); }
		public ITerminalNode INDENT() { return GetToken(FluentParser.INDENT, 0); }
		public EmptyLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.EnterEmptyLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentParserListener typedListener = listener as IFluentParserListener;
			if (typedListener != null) typedListener.ExitEmptyLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyLineContext emptyLine() {
		EmptyLineContext _localctx = new EmptyLineContext(Context, State);
		EnterRule(_localctx, 64, RULE_emptyLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDENT) {
				{
				State = 255; Match(INDENT);
				}
			}

			State = 258;
			_la = TokenStream.LA(1);
			if ( !(_la==NL || _la==NL_INDENT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ')', '\x107', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x3', 
		'\x2', '\x6', '\x2', '\x46', '\n', '\x2', '\r', '\x2', '\xE', '\x2', 'G', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', 'P', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', 'U', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '[', '\n', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x5', '\x6', '_', '\n', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'\x62', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x66', '\n', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'j', '\n', '\a', '\x3', '\b', 
		'\x6', '\b', 'm', '\n', '\b', '\r', '\b', '\xE', '\b', 'n', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\n', '\x6', '\n', 'x', '\n', '\n', '\r', '\n', '\xE', '\n', 'y', '\x3', 
		'\v', '\x3', '\v', '\x5', '\v', '~', '\n', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\a', '\xE', '\x86', 
		'\n', '\xE', '\f', '\xE', '\xE', '\xE', '\x89', '\v', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x94', '\n', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', 
		'\x12', '\x9F', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\xA2', '\v', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\a', '\x12', '\xA9', '\n', '\x12', '\f', '\x12', '\xE', '\x12', 
		'\xAC', '\v', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x5', '\x14', '\xB3', '\n', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x5', '\x14', '\xB7', '\n', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\xC3', 
		'\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', '\xC7', '\n', 
		'\x16', '\f', '\x16', '\xE', '\x16', '\xCA', '\v', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', 
		'\xD6', '\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', 
		'\x1B', '\x5', '\x1B', '\xDC', '\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\a', '\x1E', '\xEA', '\n', '\x1E', '\f', '\x1E', '\xE', '\x1E', '\xED', 
		'\v', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\xF0', '\n', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x5', '\x1F', '\xF8', '\n', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', 
		'\"', '\x5', '\"', '\x103', '\n', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\x87', '\x2', '#', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '>', '@', '\x42', '\x2', '\a', '\x3', '\x2', '\x4', 
		'\x5', '\x3', '\x2', '\x3', '\x5', '\x4', '\x2', '\b', '\b', '\xF', '\xF', 
		'\x4', '\x2', '\x1D', '\x1E', ' ', ' ', '\x3', '\x2', '\x3', '\x4', '\x2', 
		'\x105', '\x2', '\x45', '\x3', '\x2', '\x2', '\x2', '\x4', 'O', '\x3', 
		'\x2', '\x2', '\x2', '\x6', 'Q', '\x3', '\x2', '\x2', '\x2', '\b', 'V', 
		'\x3', '\x2', '\x2', '\x2', '\n', '\\', '\x3', '\x2', '\x2', '\x2', '\f', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\xE', 'l', '\x3', '\x2', '\x2', '\x2', 
		'\x10', 'p', '\x3', '\x2', '\x2', '\x2', '\x12', 'w', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '}', '\x3', '\x2', '\x2', '\x2', '\x16', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\x82', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x8A', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x93', '\x3', '\x2', '\x2', '\x2', ' ', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\"', '\xA0', '\x3', '\x2', '\x2', '\x2', '$', '\xAD', 
		'\x3', '\x2', '\x2', '\x2', '&', '\xB0', '\x3', '\x2', '\x2', '\x2', '(', 
		'\xC2', '\x3', '\x2', '\x2', '\x2', '*', '\xC4', '\x3', '\x2', '\x2', 
		'\x2', ',', '\xCD', '\x3', '\x2', '\x2', '\x2', '.', '\xCF', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\xD2', '\x3', '\x2', '\x2', '\x2', '\x32', '\xD7', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\xD9', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\xDD', '\x3', '\x2', '\x2', '\x2', '\x38', '\xE0', '\x3', '\x2', 
		'\x2', '\x2', ':', '\xE3', '\x3', '\x2', '\x2', '\x2', '<', '\xF4', '\x3', 
		'\x2', '\x2', '\x2', '>', '\xF9', '\x3', '\x2', '\x2', '\x2', '@', '\xFF', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x102', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x46', '\x5', '\x4', '\x3', '\x2', '\x45', '\x44', '\x3', '\x2', 
		'\x2', '\x2', '\x46', 'G', '\x3', '\x2', '\x2', '\x2', 'G', '\x45', '\x3', 
		'\x2', '\x2', '\x2', 'G', 'H', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x3', 
		'\x2', '\x2', '\x2', 'I', 'J', '\a', '\x2', '\x2', '\x3', 'J', '\x3', 
		'\x3', '\x2', '\x2', '\x2', 'K', 'P', '\x5', '\b', '\x5', '\x2', 'L', 
		'P', '\x5', '\n', '\x6', '\x2', 'M', 'P', '\x5', '\x6', '\x4', '\x2', 
		'N', 'P', '\x5', '\x42', '\"', '\x2', 'O', 'K', '\x3', '\x2', '\x2', '\x2', 
		'O', 'L', '\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', 
		'O', 'N', '\x3', '\x2', '\x2', '\x2', 'P', '\x5', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'R', '\a', '\x1B', '\x2', '\x2', 'R', 'T', '\a', '\x1C', '\x2', 
		'\x2', 'S', 'U', '\a', '\x3', '\x2', '\x2', 'T', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', '\a', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'W', '\a', '\x6', '\x2', '\x2', 'W', 'X', '\x5', '\f', 
		'\a', '\x2', 'X', 'Z', '\x5', '\x12', '\n', '\x2', 'Y', '[', '\x5', '\xE', 
		'\b', '\x2', 'Z', 'Y', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\x3', '\x2', 
		'\x2', '\x2', '[', '\t', '\x3', '\x2', '\x2', '\x2', '\\', '^', '\x5', 
		'\f', '\a', '\x2', ']', '_', '\x5', '\x12', '\n', '\x2', '^', ']', '\x3', 
		'\x2', '\x2', '\x2', '^', '_', '\x3', '\x2', '\x2', '\x2', '_', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x62', '\x5', '\xE', '\b', '\x2', '\x61', 
		'`', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '\v', '\x3', '\x2', '\x2', '\x2', '\x63', '\x65', '\a', 
		'\a', '\x2', '\x2', '\x64', '\x66', '\a', '\x5', '\x2', '\x2', '\x65', 
		'\x64', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\x3', '\x2', '\x2', 
		'\x2', '\x66', 'g', '\x3', '\x2', '\x2', '\x2', 'g', 'i', '\a', '\t', 
		'\x2', '\x2', 'h', 'j', '\a', '\x5', '\x2', '\x2', 'i', 'h', '\x3', '\x2', 
		'\x2', '\x2', 'i', 'j', '\x3', '\x2', '\x2', '\x2', 'j', '\r', '\x3', 
		'\x2', '\x2', '\x2', 'k', 'm', '\x5', '\x10', '\t', '\x2', 'l', 'k', '\x3', 
		'\x2', '\x2', '\x2', 'm', 'n', '\x3', '\x2', '\x2', '\x2', 'n', 'l', '\x3', 
		'\x2', '\x2', '\x2', 'n', 'o', '\x3', '\x2', '\x2', '\x2', 'o', '\xF', 
		'\x3', '\x2', '\x2', '\x2', 'p', 'q', '\x5', '\x1A', '\xE', '\x2', 'q', 
		'r', '\x5', '\x18', '\r', '\x2', 'r', 's', '\a', '\v', '\x2', '\x2', 's', 
		't', '\x5', '\f', '\a', '\x2', 't', 'u', '\x5', '\x12', '\n', '\x2', 'u', 
		'\x11', '\x3', '\x2', '\x2', '\x2', 'v', 'x', '\x5', '\x14', '\v', '\x2', 
		'w', 'v', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x3', '\x2', '\x2', '\x2', 
		'y', 'w', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\x3', '\x2', '\x2', '\x2', 
		'z', '\x13', '\x3', '\x2', '\x2', '\x2', '{', '~', '\x5', '\x16', '\f', 
		'\x2', '|', '~', '\x5', '\x1C', '\xF', '\x2', '}', '{', '\x3', '\x2', 
		'\x2', '\x2', '}', '|', '\x3', '\x2', '\x2', '\x2', '~', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x7F', '\x80', '\x5', '\x1A', '\xE', '\x2', '\x80', 
		'\x81', '\a', '\n', '\x2', '\x2', '\x81', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x83', '\t', '\x2', '\x2', '\x2', '\x83', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x86', '\t', '\x3', '\x2', '\x2', '\x85', 
		'\x84', '\x3', '\x2', '\x2', '\x2', '\x86', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x87', '\x88', '\x3', '\x2', '\x2', '\x2', '\x87', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x89', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\x5', '\x1A', '\xE', 
		'\x2', '\x8B', '\x8C', '\a', '\f', '\x2', '\x2', '\x8C', '\x8D', '\x5', 
		'\x1A', '\xE', '\x2', '\x8D', '\x8E', '\x5', '\x1E', '\x10', '\x2', '\x8E', 
		'\x8F', '\x5', '\x1A', '\xE', '\x2', '\x8F', '\x90', '\a', '\r', '\x2', 
		'\x2', '\x90', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x91', '\x94', '\x5', 
		' ', '\x11', '\x2', '\x92', '\x94', '\x5', '(', '\x15', '\x2', '\x93', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x93', '\x92', '\x3', '\x2', '\x2', 
		'\x2', '\x94', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\x5', 
		'(', '\x15', '\x2', '\x96', '\x97', '\x5', '\x1A', '\xE', '\x2', '\x97', 
		'\x98', '\a', '\x13', '\x2', '\x2', '\x98', '\x99', '\x5', '\x1A', '\xE', 
		'\x2', '\x99', '\x9A', '\x5', '\"', '\x12', '\x2', '\x9A', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x9B', '\x9C', '\x5', '\x1A', '\xE', '\x2', '\x9C', 
		'\x9D', '\x5', '&', '\x14', '\x2', '\x9D', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', '\x9E', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA2', '\x3', 
		'\x2', '\x2', '\x2', '\xA0', '\x9E', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'\xA1', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\xA2', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\x5', 
		'\x1A', '\xE', '\x2', '\xA4', '\xAA', '\x5', '$', '\x13', '\x2', '\xA5', 
		'\xA6', '\x5', '\x1A', '\xE', '\x2', '\xA6', '\xA7', '\x5', '&', '\x14', 
		'\x2', '\xA7', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\xA9', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAA', 
		'\xA8', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\x3', '\x2', '\x2', 
		'\x2', '\xAB', '#', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAA', '\x3', 
		'\x2', '\x2', '\x2', '\xAD', '\xAE', '\a', '\x18', '\x2', '\x2', '\xAE', 
		'\xAF', '\x5', '&', '\x14', '\x2', '\xAF', '%', '\x3', '\x2', '\x2', '\x2', 
		'\xB0', '\xB2', '\a', '\x19', '\x2', '\x2', '\xB1', '\xB3', '\a', '\x5', 
		'\x2', '\x2', '\xB2', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\x3', '\x2', '\x2', '\x2', 
		'\xB4', '\xB6', '\t', '\x4', '\x2', '\x2', '\xB5', '\xB7', '\a', '\x5', 
		'\x2', '\x2', '\xB6', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', 
		'\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\x3', '\x2', '\x2', '\x2', 
		'\xB8', '\xB9', '\a', '\x1A', '\x2', '\x2', '\xB9', '\xBA', '\x5', '\x12', 
		'\n', '\x2', '\xBA', '\'', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xC3', 
		'\x5', '*', '\x16', '\x2', '\xBC', '\xC3', '\x5', ',', '\x17', '\x2', 
		'\xBD', '\xC3', '\x5', '\x38', '\x1D', '\x2', '\xBE', '\xC3', '\x5', '.', 
		'\x18', '\x2', '\xBF', '\xC3', '\x5', '\x30', '\x19', '\x2', '\xC0', '\xC3', 
		'\x5', '\x32', '\x1A', '\x2', '\xC1', '\xC3', '\x5', '\x1C', '\xF', '\x2', 
		'\xC2', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xBC', '\x3', '\x2', 
		'\x2', '\x2', '\xC2', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xBE', 
		'\x3', '\x2', '\x2', '\x2', '\xC2', '\xBF', '\x3', '\x2', '\x2', '\x2', 
		'\xC2', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC1', '\x3', '\x2', 
		'\x2', '\x2', '\xC3', ')', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC8', 
		'\a', '\xE', '\x2', '\x2', '\xC5', '\xC7', '\t', '\x5', '\x2', '\x2', 
		'\xC6', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xCA', '\x3', '\x2', 
		'\x2', '\x2', '\xC8', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', 
		'\x3', '\x2', '\x2', '\x2', '\xC9', '\xCB', '\x3', '\x2', '\x2', '\x2', 
		'\xCA', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', '\a', '\x1F', 
		'\x2', '\x2', '\xCC', '+', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', 
		'\a', '\xF', '\x2', '\x2', '\xCE', '-', '\x3', '\x2', '\x2', '\x2', '\xCF', 
		'\xD0', '\a', '\x10', '\x2', '\x2', '\xD0', '\xD1', '\a', '\b', '\x2', 
		'\x2', '\xD1', '/', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD3', '\a', 
		'\x11', '\x2', '\x2', '\xD3', '\xD5', '\x5', '\x34', '\x1B', '\x2', '\xD4', 
		'\xD6', '\x5', ':', '\x1E', '\x2', '\xD5', '\xD4', '\x3', '\x2', '\x2', 
		'\x2', '\xD5', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD6', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\xD7', '\xD8', '\x5', '\x34', '\x1B', '\x2', '\xD8', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDB', '\a', '\b', '\x2', 
		'\x2', '\xDA', '\xDC', '\x5', '\x36', '\x1C', '\x2', '\xDB', '\xDA', '\x3', 
		'\x2', '\x2', '\x2', '\xDB', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDC', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', '\a', '\x12', '\x2', 
		'\x2', '\xDE', '\xDF', '\a', '\b', '\x2', '\x2', '\xDF', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\xE0', '\xE1', '\a', '\b', '\x2', '\x2', '\xE1', 
		'\xE2', '\x5', ':', '\x1E', '\x2', '\xE2', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\xE3', '\xE4', '\x5', '\x1A', '\xE', '\x2', '\xE4', '\xEB', '\a', 
		'\x14', '\x2', '\x2', '\xE5', '\xE6', '\x5', '<', '\x1F', '\x2', '\xE6', 
		'\xE7', '\x5', '\x1A', '\xE', '\x2', '\xE7', '\xE8', '\a', '\x16', '\x2', 
		'\x2', '\xE8', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xE5', '\x3', 
		'\x2', '\x2', '\x2', '\xEA', '\xED', '\x3', '\x2', '\x2', '\x2', '\xEB', 
		'\xE9', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xEC', '\x3', '\x2', '\x2', 
		'\x2', '\xEC', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEB', '\x3', 
		'\x2', '\x2', '\x2', '\xEE', '\xF0', '\x5', '<', '\x1F', '\x2', '\xEF', 
		'\xEE', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF0', '\x3', '\x2', '\x2', 
		'\x2', '\xF0', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF2', '\x5', 
		'\x1A', '\xE', '\x2', '\xF2', '\xF3', '\a', '\x15', '\x2', '\x2', '\xF3', 
		';', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF7', '\x5', '\x1A', '\xE', 
		'\x2', '\xF5', '\xF8', '\x5', '>', ' ', '\x2', '\xF6', '\xF8', '\x5', 
		'@', '!', '\x2', '\xF7', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF6', 
		'\x3', '\x2', '\x2', '\x2', '\xF8', '=', '\x3', '\x2', '\x2', '\x2', '\xF9', 
		'\xFA', '\a', '\b', '\x2', '\x2', '\xFA', '\xFB', '\x5', '\x1A', '\xE', 
		'\x2', '\xFB', '\xFC', '\a', '\x17', '\x2', '\x2', '\xFC', '\xFD', '\x5', 
		'\x1A', '\xE', '\x2', '\xFD', '\xFE', '\x5', '@', '!', '\x2', '\xFE', 
		'?', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x100', '\x5', '(', '\x15', 
		'\x2', '\x100', '\x41', '\x3', '\x2', '\x2', '\x2', '\x101', '\x103', 
		'\a', '\x5', '\x2', '\x2', '\x102', '\x101', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\x103', '\x3', '\x2', '\x2', '\x2', '\x103', '\x104', '\x3', 
		'\x2', '\x2', '\x2', '\x104', '\x105', '\t', '\x6', '\x2', '\x2', '\x105', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x1B', 'G', 'O', 'T', 'Z', '^', '\x61', 
		'\x65', 'i', 'n', 'y', '}', '\x87', '\x93', '\xA0', '\xAA', '\xB2', '\xB6', 
		'\xC2', '\xC8', '\xD5', '\xDB', '\xEB', '\xEF', '\xF7', '\x102',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
