//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:\projects\FluentTranslate\src\FluentTranslate.FtlParser\Fluent.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class FluentLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMNET_L3=1, COMMENT_L2=2, COMMENT_L1=3, COMMENT=4, WS=5, EQ=6, WORD=7, 
		TEXT=8, WHITESPACE=9, NEWLINE=10;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LOWERCASE", "UPPERCASE", "SHARP", "ANY", "COMMNET_L3", "COMMENT_L2", 
		"COMMENT_L1", "COMMENT", "WS", "EQ", "WORD", "TEXT", "WHITESPACE", "NEWLINE"
	};


	public FluentLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public FluentLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMNET_L3", "COMMENT_L2", "COMMENT_L1", "COMMENT", "WS", "EQ", 
		"WORD", "TEXT", "WHITESPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Fluent.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static FluentLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\f', '^', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\a', '\x5', 
		'\'', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '*', '\v', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\n', '\x6', '\n', '\x38', '\n', '\n', '\r', '\n', '\xE', '\n', '\x39', 
		'\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', 
		'\f', '\x6', '\f', '\x42', '\n', '\f', '\r', '\f', '\xE', '\f', '\x43', 
		'\x3', '\r', '\x3', '\r', '\a', '\r', 'H', '\n', '\r', '\f', '\r', '\xE', 
		'\r', 'K', '\v', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x6', 
		'\xE', 'P', '\n', '\xE', '\r', '\xE', '\xE', '\xE', 'Q', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xF', '\x5', '\xF', 'W', '\n', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x6', '\xF', '[', '\n', '\xF', '\r', '\xF', '\xE', '\xF', 
		'\\', '\x4', '(', 'I', '\x2', '\x10', '\x3', '\x2', '\x5', '\x2', '\a', 
		'\x2', '\t', '\x2', '\v', '\x3', '\r', '\x4', '\xF', '\x5', '\x11', '\x6', 
		'\x13', '\a', '\x15', '\b', '\x17', '\t', '\x19', '\n', '\x1B', '\v', 
		'\x1D', '\f', '\x3', '\x2', '\x5', '\x3', '\x2', '\x63', '|', '\x3', '\x2', 
		'\x43', '\\', '\x4', '\x2', '\v', '\v', '\"', '\"', '\x2', '\x62', '\x2', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\xF', '\x3', '\x2', '\x2', '\x2', '\x2', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x13', '\x3', '\x2', '\x2', '\x2', '\x2', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x19', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x3', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\x5', '!', '\x3', '\x2', '\x2', '\x2', '\a', 
		'#', '\x3', '\x2', '\x2', '\x2', '\t', '(', '\x3', '\x2', '\x2', '\x2', 
		'\v', '+', '\x3', '\x2', '\x2', '\x2', '\r', '/', '\x3', '\x2', '\x2', 
		'\x2', '\xF', '\x32', '\x3', '\x2', '\x2', '\x2', '\x11', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\x13', '\x37', '\x3', '\x2', '\x2', '\x2', '\x15', 
		'=', '\x3', '\x2', '\x2', '\x2', '\x17', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x19', '\x45', '\x3', '\x2', '\x2', '\x2', '\x1B', 'O', '\x3', 
		'\x2', '\x2', '\x2', '\x1D', 'Z', '\x3', '\x2', '\x2', '\x2', '\x1F', 
		' ', '\t', '\x2', '\x2', '\x2', ' ', '\x4', '\x3', '\x2', '\x2', '\x2', 
		'!', '\"', '\t', '\x3', '\x2', '\x2', '\"', '\x6', '\x3', '\x2', '\x2', 
		'\x2', '#', '$', '\a', '%', '\x2', '\x2', '$', '\b', '\x3', '\x2', '\x2', 
		'\x2', '%', '\'', '\v', '\x2', '\x2', '\x2', '&', '%', '\x3', '\x2', '\x2', 
		'\x2', '\'', '*', '\x3', '\x2', '\x2', '\x2', '(', ')', '\x3', '\x2', 
		'\x2', '\x2', '(', '&', '\x3', '\x2', '\x2', '\x2', ')', '\n', '\x3', 
		'\x2', '\x2', '\x2', '*', '(', '\x3', '\x2', '\x2', '\x2', '+', ',', '\x5', 
		'\a', '\x4', '\x2', ',', '-', '\x5', '\a', '\x4', '\x2', '-', '.', '\x5', 
		'\a', '\x4', '\x2', '.', '\f', '\x3', '\x2', '\x2', '\x2', '/', '\x30', 
		'\x5', '\a', '\x4', '\x2', '\x30', '\x31', '\x5', '\a', '\x4', '\x2', 
		'\x31', '\xE', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\x5', '\a', 
		'\x4', '\x2', '\x33', '\x10', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', 
		'\x5', '\t', '\x5', '\x2', '\x35', '\x12', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x38', '\t', '\x4', '\x2', '\x2', '\x37', '\x36', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x39', '\x3', '\x2', '\x2', '\x2', '\x39', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x39', ':', '\x3', '\x2', '\x2', '\x2', ':', 
		';', '\x3', '\x2', '\x2', '\x2', ';', '<', '\b', '\n', '\x2', '\x2', '<', 
		'\x14', '\x3', '\x2', '\x2', '\x2', '=', '>', '\a', '?', '\x2', '\x2', 
		'>', '\x16', '\x3', '\x2', '\x2', '\x2', '?', '\x42', '\x5', '\x3', '\x2', 
		'\x2', '@', '\x42', '\x5', '\x5', '\x3', '\x2', '\x41', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '@', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x44', '\x3', '\x2', '\x2', '\x2', '\x44', '\x18', '\x3', '\x2', 
		'\x2', '\x2', '\x45', 'I', '\a', '$', '\x2', '\x2', '\x46', 'H', '\v', 
		'\x2', '\x2', '\x2', 'G', '\x46', '\x3', '\x2', '\x2', '\x2', 'H', 'K', 
		'\x3', '\x2', '\x2', '\x2', 'I', 'J', '\x3', '\x2', '\x2', '\x2', 'I', 
		'G', '\x3', '\x2', '\x2', '\x2', 'J', 'L', '\x3', '\x2', '\x2', '\x2', 
		'K', 'I', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\a', '$', '\x2', '\x2', 
		'M', '\x1A', '\x3', '\x2', '\x2', '\x2', 'N', 'P', '\t', '\x4', '\x2', 
		'\x2', 'O', 'N', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'S', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\b', '\xE', '\x2', 
		'\x2', 'T', '\x1C', '\x3', '\x2', '\x2', '\x2', 'U', 'W', '\a', '\xF', 
		'\x2', '\x2', 'V', 'U', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', '[', '\a', '\f', 
		'\x2', '\x2', 'Y', '[', '\a', '\xF', '\x2', '\x2', 'Z', 'V', '\x3', '\x2', 
		'\x2', '\x2', 'Z', 'Y', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\x3', 
		'\x2', '\x2', '\x2', '\\', 'Z', '\x3', '\x2', '\x2', '\x2', '\\', ']', 
		'\x3', '\x2', '\x2', '\x2', ']', '\x1E', '\x3', '\x2', '\x2', '\x2', '\f', 
		'\x2', '(', '\x39', '\x41', '\x43', 'I', 'Q', 'V', 'Z', '\\', '\x3', '\b', 
		'\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
