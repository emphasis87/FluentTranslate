//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\projects\FluentTranslate\src\FluentTranslate\Parser\Grammars\FluentParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace FluentTranslate.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class FluentParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NL=1, NL_INDENT=2, INDENT=3, TERM=4, IDENTIFIER=5, IDENTIFIER_REF=6, EQUALS=7, 
		TEXT=8, ATTRIBUTE=9, PLACEABLE_OPEN=10, PLACEABLE_CLOSE=11, STRING_OPEN=12, 
		NUMBER_LITERAL=13, VARIABLE_REF=14, TERM_REF=15, ATTRIBUTE_REF=16, SELECTOR=17, 
		CALL_OPEN=18, CALL_CLOSE=19, CALL_ARG_SEP=20, CALL_ARG_NAME_SEP=21, VARIANT_DEFAULT=22, 
		VARIANT_OPEN=23, VARIANT_CLOSE=24, COMMENT_OPEN=25, COMMENT=26, ESCAPED_CHAR=27, 
		UNICODE_ESCAPE=28, STRING_CLOSE=29, QUOTED_STRING=30, ML_VARIANT_DEFAULT=31, 
		ML_VARIANT_OPEN=32, PL_VARIABLE_REF=33, PL_TERM_REF=34, PL_ATTRIBUTE_REF=35, 
		CL_PLACEABLE_CLOSE=36, CL_CLOSE=37, CL_ARG_SEP=38, CL_ARG_NAME_SEP=39;
	public const int
		RULE_resource = 0, RULE_entry = 1, RULE_comment = 2, RULE_term = 3, RULE_message = 4, 
		RULE_record = 5, RULE_attributeList = 6, RULE_attribute = 7, RULE_expressionList = 8, 
		RULE_expression = 9, RULE_text = 10, RULE_indent = 11, RULE_ws = 12, RULE_placeable = 13, 
		RULE_placeableExpression = 14, RULE_selectExpression = 15, RULE_variantList = 16, 
		RULE_defaultVariant = 17, RULE_variant = 18, RULE_identifier = 19, RULE_inlineExpression = 20, 
		RULE_stringLiteral = 21, RULE_numberLiteral = 22, RULE_variableReference = 23, 
		RULE_termReference = 24, RULE_messageReference = 25, RULE_recordReference = 26, 
		RULE_attributeAccessor = 27, RULE_functionCall = 28, RULE_argumentList = 29, 
		RULE_argument = 30, RULE_namedArgument = 31, RULE_inlineArgument = 32, 
		RULE_argumentExpression = 33, RULE_emptyLine = 34;
	public static readonly string[] ruleNames = {
		"resource", "entry", "comment", "term", "message", "record", "attributeList", 
		"attribute", "expressionList", "expression", "text", "indent", "ws", "placeable", 
		"placeableExpression", "selectExpression", "variantList", "defaultVariant", 
		"variant", "identifier", "inlineExpression", "stringLiteral", "numberLiteral", 
		"variableReference", "termReference", "messageReference", "recordReference", 
		"attributeAccessor", "functionCall", "argumentList", "argument", "namedArgument", 
		"inlineArgument", "argumentExpression", "emptyLine"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "'\"'", null, null, null, null, null, null, 
		null, "')'", "','", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NL", "NL_INDENT", "INDENT", "TERM", "IDENTIFIER", "IDENTIFIER_REF", 
		"EQUALS", "TEXT", "ATTRIBUTE", "PLACEABLE_OPEN", "PLACEABLE_CLOSE", "STRING_OPEN", 
		"NUMBER_LITERAL", "VARIABLE_REF", "TERM_REF", "ATTRIBUTE_REF", "SELECTOR", 
		"CALL_OPEN", "CALL_CLOSE", "CALL_ARG_SEP", "CALL_ARG_NAME_SEP", "VARIANT_DEFAULT", 
		"VARIANT_OPEN", "VARIANT_CLOSE", "COMMENT_OPEN", "COMMENT", "ESCAPED_CHAR", 
		"UNICODE_ESCAPE", "STRING_CLOSE", "QUOTED_STRING", "ML_VARIANT_DEFAULT", 
		"ML_VARIANT_OPEN", "PL_VARIABLE_REF", "PL_TERM_REF", "PL_ATTRIBUTE_REF", 
		"CL_PLACEABLE_CLOSE", "CL_CLOSE", "CL_ARG_SEP", "CL_ARG_NAME_SEP"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FluentParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static FluentParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FluentParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FluentParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ResourceContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(FluentParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntryContext[] entry() {
			return GetRuleContexts<EntryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntryContext entry(int i) {
			return GetRuleContext<EntryContext>(i);
		}
		public ResourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceContext resource() {
		ResourceContext _localctx = new ResourceContext(Context, State);
		EnterRule(_localctx, 0, RULE_resource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NL) | (1L << NL_INDENT) | (1L << INDENT) | (1L << TERM) | (1L << IDENTIFIER) | (1L << COMMENT_OPEN))) != 0)) {
				{
				{
				State = 70;
				entry();
				}
				}
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 76;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntryContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessageContext message() {
			return GetRuleContext<MessageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyLineContext emptyLine() {
			return GetRuleContext<EmptyLineContext>(0);
		}
		public EntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntryContext entry() {
		EntryContext _localctx = new EntryContext(Context, State);
		EnterRule(_localctx, 2, RULE_entry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TERM:
				{
				State = 78;
				term();
				}
				break;
			case IDENTIFIER:
				{
				State = 79;
				message();
				}
				break;
			case COMMENT_OPEN:
				{
				State = 80;
				comment();
				}
				break;
			case NL:
			case NL_INDENT:
			case INDENT:
				{
				State = 81;
				emptyLine();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_OPEN() { return GetToken(FluentParser.COMMENT_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(FluentParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(FluentParser.NL, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 4, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			Match(COMMENT_OPEN);
			State = 85;
			Match(COMMENT);
			State = 87;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 86;
				Match(NL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERM() { return GetToken(FluentParser.TERM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RecordContext record() {
			return GetRuleContext<RecordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeListContext attributeList() {
			return GetRuleContext<AttributeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(FluentParser.NL, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 6, RULE_term);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			Match(TERM);
			State = 90;
			record();
			State = 91;
			expressionList();
			State = 93;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 92;
				attributeList();
				}
				break;
			}
			State = 96;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 95;
				Match(NL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public RecordContext record() {
			return GetRuleContext<RecordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeListContext attributeList() {
			return GetRuleContext<AttributeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(FluentParser.NL, 0); }
		public MessageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_message; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageContext message() {
		MessageContext _localctx = new MessageContext(Context, State);
		EnterRule(_localctx, 8, RULE_message);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			record();
			State = 100;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 99;
				expressionList();
				}
				break;
			}
			State = 103;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 102;
				attributeList();
				}
				break;
			}
			State = 106;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 105;
				Match(NL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(FluentParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(FluentParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INDENT() { return GetTokens(FluentParser.INDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT(int i) {
			return GetToken(FluentParser.INDENT, i);
		}
		public RecordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_record; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordContext record() {
		RecordContext _localctx = new RecordContext(Context, State);
		EnterRule(_localctx, 10, RULE_record);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			Match(IDENTIFIER);
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDENT) {
				{
				State = 109;
				Match(INDENT);
				}
			}

			State = 112;
			Match(EQUALS);
			State = 114;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 113;
				Match(INDENT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeListContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public AttributeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeListContext attributeList() {
		AttributeListContext _localctx = new AttributeListContext(Context, State);
		EnterRule(_localctx, 12, RULE_attributeList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 116;
					attribute();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 119;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws() {
			return GetRuleContext<WsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndentContext indent() {
			return GetRuleContext<IndentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE() { return GetToken(FluentParser.ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RecordContext record() {
			return GetRuleContext<RecordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 14, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			ws();
			State = 122;
			indent();
			State = 123;
			Match(ATTRIBUTE);
			State = 124;
			record();
			State = 125;
			expressionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 16, RULE_expressionList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 127;
					expression();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 130;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlaceableContext placeable() {
			return GetRuleContext<PlaceableContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_expression);
		try {
			State = 134;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 132;
				text();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 133;
				placeable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws() {
			return GetRuleContext<WsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(FluentParser.TEXT, 0); }
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 20, RULE_text);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			ws();
			State = 137;
			Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndentContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(FluentParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL_INDENT() { return GetToken(FluentParser.NL_INDENT, 0); }
		public IndentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndentContext indent() {
		IndentContext _localctx = new IndentContext(Context, State);
		EnterRule(_localctx, 22, RULE_indent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			_la = TokenStream.LA(1);
			if ( !(_la==NL_INDENT || _la==INDENT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WsContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INDENT() { return GetTokens(FluentParser.INDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT(int i) {
			return GetToken(FluentParser.INDENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(FluentParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(FluentParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL_INDENT() { return GetTokens(FluentParser.NL_INDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL_INDENT(int i) {
			return GetToken(FluentParser.NL_INDENT, i);
		}
		public WsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ws; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WsContext ws() {
		WsContext _localctx = new WsContext(Context, State);
		EnterRule(_localctx, 24, RULE_ws);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 141;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NL) | (1L << NL_INDENT) | (1L << INDENT))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 146;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlaceableContext : FluentTranslate.Parser.FluentParserContext {
		public WsContext Prefix;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLACEABLE_OPEN() { return GetToken(FluentParser.PLACEABLE_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlaceableExpressionContext placeableExpression() {
			return GetRuleContext<PlaceableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLACEABLE_CLOSE() { return GetToken(FluentParser.PLACEABLE_CLOSE, 0); }
		public PlaceableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_placeable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlaceable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlaceableContext placeable() {
		PlaceableContext _localctx = new PlaceableContext(Context, State);
		EnterRule(_localctx, 26, RULE_placeable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			_localctx.Prefix = ws();
			State = 148;
			Match(PLACEABLE_OPEN);
			State = 149;
			ws();
			State = 150;
			placeableExpression();
			State = 151;
			ws();
			State = 152;
			Match(PLACEABLE_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlaceableExpressionContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectExpressionContext selectExpression() {
			return GetRuleContext<SelectExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InlineExpressionContext inlineExpression() {
			return GetRuleContext<InlineExpressionContext>(0);
		}
		public PlaceableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_placeableExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlaceableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlaceableExpressionContext placeableExpression() {
		PlaceableExpressionContext _localctx = new PlaceableExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_placeableExpression);
		try {
			State = 156;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 154;
				selectExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 155;
				inlineExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectExpressionContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public InlineExpressionContext inlineExpression() {
			return GetRuleContext<InlineExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECTOR() { return GetToken(FluentParser.SELECTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariantListContext variantList() {
			return GetRuleContext<VariantListContext>(0);
		}
		public SelectExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectExpressionContext selectExpression() {
		SelectExpressionContext _localctx = new SelectExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_selectExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			inlineExpression();
			State = 159;
			ws();
			State = 160;
			Match(SELECTOR);
			State = 161;
			ws();
			State = 162;
			variantList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariantListContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultVariantContext defaultVariant() {
			return GetRuleContext<DefaultVariantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariantContext[] variant() {
			return GetRuleContexts<VariantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariantContext variant(int i) {
			return GetRuleContext<VariantContext>(i);
		}
		public VariantListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variantList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariantList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariantListContext variantList() {
		VariantListContext _localctx = new VariantListContext(Context, State);
		EnterRule(_localctx, 32, RULE_variantList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 164;
					ws();
					State = 165;
					variant();
					}
					} 
				}
				State = 171;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			State = 172;
			ws();
			State = 173;
			defaultVariant();
			State = 179;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 174;
					ws();
					State = 175;
					variant();
					}
					} 
				}
				State = 181;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultVariantContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIANT_DEFAULT() { return GetToken(FluentParser.VARIANT_DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariantContext variant() {
			return GetRuleContext<VariantContext>(0);
		}
		public DefaultVariantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultVariant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultVariant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultVariantContext defaultVariant() {
		DefaultVariantContext _localctx = new DefaultVariantContext(Context, State);
		EnterRule(_localctx, 34, RULE_defaultVariant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			Match(VARIANT_DEFAULT);
			State = 183;
			variant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariantContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIANT_OPEN() { return GetToken(FluentParser.VARIANT_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIANT_CLOSE() { return GetToken(FluentParser.VARIANT_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_LITERAL() { return GetToken(FluentParser.NUMBER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INDENT() { return GetTokens(FluentParser.INDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT(int i) {
			return GetToken(FluentParser.INDENT, i);
		}
		public VariantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariantContext variant() {
		VariantContext _localctx = new VariantContext(Context, State);
		EnterRule(_localctx, 36, RULE_variant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			Match(VARIANT_OPEN);
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDENT) {
				{
				State = 186;
				Match(INDENT);
				}
			}

			State = 191;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER_REF:
				{
				State = 189;
				identifier();
				}
				break;
			case NUMBER_LITERAL:
				{
				State = 190;
				Match(NUMBER_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDENT) {
				{
				State = 193;
				Match(INDENT);
				}
			}

			State = 196;
			Match(VARIANT_CLOSE);
			State = 197;
			expressionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER_REF() { return GetToken(FluentParser.IDENTIFIER_REF, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 38, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			Match(IDENTIFIER_REF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineExpressionContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableReferenceContext variableReference() {
			return GetRuleContext<VariableReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermReferenceContext termReference() {
			return GetRuleContext<TermReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessageReferenceContext messageReference() {
			return GetRuleContext<MessageReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlaceableContext placeable() {
			return GetRuleContext<PlaceableContext>(0);
		}
		public InlineExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineExpressionContext inlineExpression() {
		InlineExpressionContext _localctx = new InlineExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_inlineExpression);
		try {
			State = 208;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 201;
				stringLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 202;
				numberLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 203;
				functionCall();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 204;
				variableReference();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 205;
				termReference();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 206;
				messageReference();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 207;
				placeable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_OPEN() { return GetToken(FluentParser.STRING_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_CLOSE() { return GetToken(FluentParser.STRING_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ESCAPED_CHAR() { return GetTokens(FluentParser.ESCAPED_CHAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPED_CHAR(int i) {
			return GetToken(FluentParser.ESCAPED_CHAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UNICODE_ESCAPE() { return GetTokens(FluentParser.UNICODE_ESCAPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNICODE_ESCAPE(int i) {
			return GetToken(FluentParser.UNICODE_ESCAPE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QUOTED_STRING() { return GetTokens(FluentParser.QUOTED_STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTED_STRING(int i) {
			return GetToken(FluentParser.QUOTED_STRING, i);
		}
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 42, RULE_stringLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			Match(STRING_OPEN);
			State = 214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ESCAPED_CHAR) | (1L << UNICODE_ESCAPE) | (1L << QUOTED_STRING))) != 0)) {
				{
				{
				State = 211;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ESCAPED_CHAR) | (1L << UNICODE_ESCAPE) | (1L << QUOTED_STRING))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 216;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 217;
			Match(STRING_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberLiteralContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_LITERAL() { return GetToken(FluentParser.NUMBER_LITERAL, 0); }
		public NumberLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberLiteralContext numberLiteral() {
		NumberLiteralContext _localctx = new NumberLiteralContext(Context, State);
		EnterRule(_localctx, 44, RULE_numberLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			Match(NUMBER_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableReferenceContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_REF() { return GetToken(FluentParser.VARIABLE_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER_REF() { return GetToken(FluentParser.IDENTIFIER_REF, 0); }
		public VariableReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableReferenceContext variableReference() {
		VariableReferenceContext _localctx = new VariableReferenceContext(Context, State);
		EnterRule(_localctx, 46, RULE_variableReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			Match(VARIABLE_REF);
			State = 222;
			Match(IDENTIFIER_REF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermReferenceContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERM_REF() { return GetToken(FluentParser.TERM_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RecordReferenceContext recordReference() {
			return GetRuleContext<RecordReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public TermReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_termReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermReferenceContext termReference() {
		TermReferenceContext _localctx = new TermReferenceContext(Context, State);
		EnterRule(_localctx, 48, RULE_termReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			Match(TERM_REF);
			State = 225;
			recordReference();
			State = 227;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 226;
				argumentList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageReferenceContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public RecordReferenceContext recordReference() {
			return GetRuleContext<RecordReferenceContext>(0);
		}
		public MessageReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageReferenceContext messageReference() {
		MessageReferenceContext _localctx = new MessageReferenceContext(Context, State);
		EnterRule(_localctx, 50, RULE_messageReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			recordReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordReferenceContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER_REF() { return GetToken(FluentParser.IDENTIFIER_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeAccessorContext attributeAccessor() {
			return GetRuleContext<AttributeAccessorContext>(0);
		}
		public RecordReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordReferenceContext recordReference() {
		RecordReferenceContext _localctx = new RecordReferenceContext(Context, State);
		EnterRule(_localctx, 52, RULE_recordReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			Match(IDENTIFIER_REF);
			State = 233;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ATTRIBUTE_REF) {
				{
				State = 232;
				attributeAccessor();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeAccessorContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE_REF() { return GetToken(FluentParser.ATTRIBUTE_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER_REF() { return GetToken(FluentParser.IDENTIFIER_REF, 0); }
		public AttributeAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeAccessor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeAccessor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeAccessorContext attributeAccessor() {
		AttributeAccessorContext _localctx = new AttributeAccessorContext(Context, State);
		EnterRule(_localctx, 54, RULE_attributeAccessor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			Match(ATTRIBUTE_REF);
			State = 236;
			Match(IDENTIFIER_REF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER_REF() { return GetToken(FluentParser.IDENTIFIER_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 56, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			Match(IDENTIFIER_REF);
			State = 239;
			argumentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL_OPEN() { return GetToken(FluentParser.CALL_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL_CLOSE() { return GetToken(FluentParser.CALL_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CALL_ARG_SEP() { return GetTokens(FluentParser.CALL_ARG_SEP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL_ARG_SEP(int i) {
			return GetToken(FluentParser.CALL_ARG_SEP, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 58, RULE_argumentList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			ws();
			State = 242;
			Match(CALL_OPEN);
			State = 249;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 243;
					argument();
					State = 244;
					ws();
					State = 245;
					Match(CALL_ARG_SEP);
					}
					} 
				}
				State = 251;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			State = 253;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 252;
				argument();
				}
				break;
			}
			State = 255;
			ws();
			State = 256;
			Match(CALL_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws() {
			return GetRuleContext<WsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamedArgumentContext namedArgument() {
			return GetRuleContext<NamedArgumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InlineArgumentContext inlineArgument() {
			return GetRuleContext<InlineArgumentContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 60, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			ws();
			State = 261;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 259;
				namedArgument();
				}
				break;
			case 2:
				{
				State = 260;
				inlineArgument();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedArgumentContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER_REF() { return GetToken(FluentParser.IDENTIFIER_REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL_ARG_NAME_SEP() { return GetToken(FluentParser.CALL_ARG_NAME_SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentExpressionContext argumentExpression() {
			return GetRuleContext<ArgumentExpressionContext>(0);
		}
		public NamedArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedArgumentContext namedArgument() {
		NamedArgumentContext _localctx = new NamedArgumentContext(Context, State);
		EnterRule(_localctx, 62, RULE_namedArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			Match(IDENTIFIER_REF);
			State = 264;
			ws();
			State = 265;
			Match(CALL_ARG_NAME_SEP);
			State = 266;
			ws();
			State = 267;
			argumentExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineArgumentContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentExpressionContext argumentExpression() {
			return GetRuleContext<ArgumentExpressionContext>(0);
		}
		public InlineArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineArgumentContext inlineArgument() {
		InlineArgumentContext _localctx = new InlineArgumentContext(Context, State);
		EnterRule(_localctx, 64, RULE_inlineArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			argumentExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentExpressionContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public InlineExpressionContext inlineExpression() {
			return GetRuleContext<InlineExpressionContext>(0);
		}
		public ArgumentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentExpressionContext argumentExpression() {
		ArgumentExpressionContext _localctx = new ArgumentExpressionContext(Context, State);
		EnterRule(_localctx, 66, RULE_argumentExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			inlineExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyLineContext : FluentTranslate.Parser.FluentParserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(FluentParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL_INDENT() { return GetToken(FluentParser.NL_INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(FluentParser.INDENT, 0); }
		public EmptyLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentParserVisitor<TResult> typedVisitor = visitor as IFluentParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyLineContext emptyLine() {
		EmptyLineContext _localctx = new EmptyLineContext(Context, State);
		EnterRule(_localctx, 68, RULE_emptyLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDENT) {
				{
				State = 273;
				Match(INDENT);
				}
			}

			State = 276;
			_la = TokenStream.LA(1);
			if ( !(_la==NL || _la==NL_INDENT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,39,279,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,1,0,5,0,72,
		8,0,10,0,12,0,75,9,0,1,0,1,0,1,1,1,1,1,1,1,1,3,1,83,8,1,1,2,1,2,1,2,3,
		2,88,8,2,1,3,1,3,1,3,1,3,3,3,94,8,3,1,3,3,3,97,8,3,1,4,1,4,3,4,101,8,4,
		1,4,3,4,104,8,4,1,4,3,4,107,8,4,1,5,1,5,3,5,111,8,5,1,5,1,5,3,5,115,8,
		5,1,6,4,6,118,8,6,11,6,12,6,119,1,7,1,7,1,7,1,7,1,7,1,7,1,8,4,8,129,8,
		8,11,8,12,8,130,1,9,1,9,3,9,135,8,9,1,10,1,10,1,10,1,11,1,11,1,12,5,12,
		143,8,12,10,12,12,12,146,9,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,
		1,14,3,14,157,8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,5,16,168,
		8,16,10,16,12,16,171,9,16,1,16,1,16,1,16,1,16,1,16,5,16,178,8,16,10,16,
		12,16,181,9,16,1,17,1,17,1,17,1,18,1,18,3,18,188,8,18,1,18,1,18,3,18,192,
		8,18,1,18,3,18,195,8,18,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,1,
		20,1,20,1,20,3,20,209,8,20,1,21,1,21,5,21,213,8,21,10,21,12,21,216,9,21,
		1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,3,24,228,8,24,1,25,1,
		25,1,26,1,26,3,26,234,8,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,
		1,29,1,29,1,29,5,29,248,8,29,10,29,12,29,251,9,29,1,29,3,29,254,8,29,1,
		29,1,29,1,29,1,30,1,30,1,30,3,30,262,8,30,1,31,1,31,1,31,1,31,1,31,1,31,
		1,32,1,32,1,33,1,33,1,34,3,34,275,8,34,1,34,1,34,1,34,1,144,0,35,0,2,4,
		6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
		54,56,58,60,62,64,66,68,0,4,1,0,2,3,1,0,1,3,2,0,27,28,30,30,1,0,1,2,278,
		0,73,1,0,0,0,2,82,1,0,0,0,4,84,1,0,0,0,6,89,1,0,0,0,8,98,1,0,0,0,10,108,
		1,0,0,0,12,117,1,0,0,0,14,121,1,0,0,0,16,128,1,0,0,0,18,134,1,0,0,0,20,
		136,1,0,0,0,22,139,1,0,0,0,24,144,1,0,0,0,26,147,1,0,0,0,28,156,1,0,0,
		0,30,158,1,0,0,0,32,169,1,0,0,0,34,182,1,0,0,0,36,185,1,0,0,0,38,199,1,
		0,0,0,40,208,1,0,0,0,42,210,1,0,0,0,44,219,1,0,0,0,46,221,1,0,0,0,48,224,
		1,0,0,0,50,229,1,0,0,0,52,231,1,0,0,0,54,235,1,0,0,0,56,238,1,0,0,0,58,
		241,1,0,0,0,60,258,1,0,0,0,62,263,1,0,0,0,64,269,1,0,0,0,66,271,1,0,0,
		0,68,274,1,0,0,0,70,72,3,2,1,0,71,70,1,0,0,0,72,75,1,0,0,0,73,71,1,0,0,
		0,73,74,1,0,0,0,74,76,1,0,0,0,75,73,1,0,0,0,76,77,5,0,0,1,77,1,1,0,0,0,
		78,83,3,6,3,0,79,83,3,8,4,0,80,83,3,4,2,0,81,83,3,68,34,0,82,78,1,0,0,
		0,82,79,1,0,0,0,82,80,1,0,0,0,82,81,1,0,0,0,83,3,1,0,0,0,84,85,5,25,0,
		0,85,87,5,26,0,0,86,88,5,1,0,0,87,86,1,0,0,0,87,88,1,0,0,0,88,5,1,0,0,
		0,89,90,5,4,0,0,90,91,3,10,5,0,91,93,3,16,8,0,92,94,3,12,6,0,93,92,1,0,
		0,0,93,94,1,0,0,0,94,96,1,0,0,0,95,97,5,1,0,0,96,95,1,0,0,0,96,97,1,0,
		0,0,97,7,1,0,0,0,98,100,3,10,5,0,99,101,3,16,8,0,100,99,1,0,0,0,100,101,
		1,0,0,0,101,103,1,0,0,0,102,104,3,12,6,0,103,102,1,0,0,0,103,104,1,0,0,
		0,104,106,1,0,0,0,105,107,5,1,0,0,106,105,1,0,0,0,106,107,1,0,0,0,107,
		9,1,0,0,0,108,110,5,5,0,0,109,111,5,3,0,0,110,109,1,0,0,0,110,111,1,0,
		0,0,111,112,1,0,0,0,112,114,5,7,0,0,113,115,5,3,0,0,114,113,1,0,0,0,114,
		115,1,0,0,0,115,11,1,0,0,0,116,118,3,14,7,0,117,116,1,0,0,0,118,119,1,
		0,0,0,119,117,1,0,0,0,119,120,1,0,0,0,120,13,1,0,0,0,121,122,3,24,12,0,
		122,123,3,22,11,0,123,124,5,9,0,0,124,125,3,10,5,0,125,126,3,16,8,0,126,
		15,1,0,0,0,127,129,3,18,9,0,128,127,1,0,0,0,129,130,1,0,0,0,130,128,1,
		0,0,0,130,131,1,0,0,0,131,17,1,0,0,0,132,135,3,20,10,0,133,135,3,26,13,
		0,134,132,1,0,0,0,134,133,1,0,0,0,135,19,1,0,0,0,136,137,3,24,12,0,137,
		138,5,8,0,0,138,21,1,0,0,0,139,140,7,0,0,0,140,23,1,0,0,0,141,143,7,1,
		0,0,142,141,1,0,0,0,143,146,1,0,0,0,144,145,1,0,0,0,144,142,1,0,0,0,145,
		25,1,0,0,0,146,144,1,0,0,0,147,148,3,24,12,0,148,149,5,10,0,0,149,150,
		3,24,12,0,150,151,3,28,14,0,151,152,3,24,12,0,152,153,5,11,0,0,153,27,
		1,0,0,0,154,157,3,30,15,0,155,157,3,40,20,0,156,154,1,0,0,0,156,155,1,
		0,0,0,157,29,1,0,0,0,158,159,3,40,20,0,159,160,3,24,12,0,160,161,5,17,
		0,0,161,162,3,24,12,0,162,163,3,32,16,0,163,31,1,0,0,0,164,165,3,24,12,
		0,165,166,3,36,18,0,166,168,1,0,0,0,167,164,1,0,0,0,168,171,1,0,0,0,169,
		167,1,0,0,0,169,170,1,0,0,0,170,172,1,0,0,0,171,169,1,0,0,0,172,173,3,
		24,12,0,173,179,3,34,17,0,174,175,3,24,12,0,175,176,3,36,18,0,176,178,
		1,0,0,0,177,174,1,0,0,0,178,181,1,0,0,0,179,177,1,0,0,0,179,180,1,0,0,
		0,180,33,1,0,0,0,181,179,1,0,0,0,182,183,5,22,0,0,183,184,3,36,18,0,184,
		35,1,0,0,0,185,187,5,23,0,0,186,188,5,3,0,0,187,186,1,0,0,0,187,188,1,
		0,0,0,188,191,1,0,0,0,189,192,3,38,19,0,190,192,5,13,0,0,191,189,1,0,0,
		0,191,190,1,0,0,0,192,194,1,0,0,0,193,195,5,3,0,0,194,193,1,0,0,0,194,
		195,1,0,0,0,195,196,1,0,0,0,196,197,5,24,0,0,197,198,3,16,8,0,198,37,1,
		0,0,0,199,200,5,6,0,0,200,39,1,0,0,0,201,209,3,42,21,0,202,209,3,44,22,
		0,203,209,3,56,28,0,204,209,3,46,23,0,205,209,3,48,24,0,206,209,3,50,25,
		0,207,209,3,26,13,0,208,201,1,0,0,0,208,202,1,0,0,0,208,203,1,0,0,0,208,
		204,1,0,0,0,208,205,1,0,0,0,208,206,1,0,0,0,208,207,1,0,0,0,209,41,1,0,
		0,0,210,214,5,12,0,0,211,213,7,2,0,0,212,211,1,0,0,0,213,216,1,0,0,0,214,
		212,1,0,0,0,214,215,1,0,0,0,215,217,1,0,0,0,216,214,1,0,0,0,217,218,5,
		29,0,0,218,43,1,0,0,0,219,220,5,13,0,0,220,45,1,0,0,0,221,222,5,14,0,0,
		222,223,5,6,0,0,223,47,1,0,0,0,224,225,5,15,0,0,225,227,3,52,26,0,226,
		228,3,58,29,0,227,226,1,0,0,0,227,228,1,0,0,0,228,49,1,0,0,0,229,230,3,
		52,26,0,230,51,1,0,0,0,231,233,5,6,0,0,232,234,3,54,27,0,233,232,1,0,0,
		0,233,234,1,0,0,0,234,53,1,0,0,0,235,236,5,16,0,0,236,237,5,6,0,0,237,
		55,1,0,0,0,238,239,5,6,0,0,239,240,3,58,29,0,240,57,1,0,0,0,241,242,3,
		24,12,0,242,249,5,18,0,0,243,244,3,60,30,0,244,245,3,24,12,0,245,246,5,
		20,0,0,246,248,1,0,0,0,247,243,1,0,0,0,248,251,1,0,0,0,249,247,1,0,0,0,
		249,250,1,0,0,0,250,253,1,0,0,0,251,249,1,0,0,0,252,254,3,60,30,0,253,
		252,1,0,0,0,253,254,1,0,0,0,254,255,1,0,0,0,255,256,3,24,12,0,256,257,
		5,19,0,0,257,59,1,0,0,0,258,261,3,24,12,0,259,262,3,62,31,0,260,262,3,
		64,32,0,261,259,1,0,0,0,261,260,1,0,0,0,262,61,1,0,0,0,263,264,5,6,0,0,
		264,265,3,24,12,0,265,266,5,21,0,0,266,267,3,24,12,0,267,268,3,66,33,0,
		268,63,1,0,0,0,269,270,3,66,33,0,270,65,1,0,0,0,271,272,3,40,20,0,272,
		67,1,0,0,0,273,275,5,3,0,0,274,273,1,0,0,0,274,275,1,0,0,0,275,276,1,0,
		0,0,276,277,7,3,0,0,277,69,1,0,0,0,28,73,82,87,93,96,100,103,106,110,114,
		119,130,134,144,156,169,179,187,191,194,208,214,227,233,249,253,261,274
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace FluentTranslate.Parser
